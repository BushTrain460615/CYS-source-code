// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Effect
#include <Effect.h>
#endif
#ifndef INCLUDED_ThreeDEffect
#include <ThreeDEffect.h>
#endif
#ifndef INCLUDED_ThreeDShader
#include <ThreeDShader.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_83f44a1271bc0fbd_625_new,"ThreeDEffect","new",0xd4a0e1e9,"ThreeDEffect.new","Shaders.hx",625,0x469785f0)

void ThreeDEffect_obj::__construct(::hx::Null< Float >  __o_xrotation,::hx::Null< Float >  __o_yrotation,::hx::Null< Float >  __o_zrotation,::hx::Null< Float >  __o_depth){
            		Float xrotation = __o_xrotation.Default(0);
            		Float yrotation = __o_yrotation.Default(0);
            		Float zrotation = __o_zrotation.Default(0);
            		Float depth = __o_depth.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_83f44a1271bc0fbd_625_new)
HXLINE( 627)		this->shader =  ::ThreeDShader_obj::__alloc( HX_CTX );
HXLINE( 629)		this->shader->xrot->value = ::Array_obj< Float >::__new(1)->init(0,xrotation);
HXLINE( 630)		this->shader->yrot->value = ::Array_obj< Float >::__new(1)->init(0,yrotation);
HXLINE( 631)		this->shader->zrot->value = ::Array_obj< Float >::__new(1)->init(0,zrotation);
HXLINE( 632)		this->shader->dept->value = ::Array_obj< Float >::__new(1)->init(0,depth);
            	}

Dynamic ThreeDEffect_obj::__CreateEmpty() { return new ThreeDEffect_obj; }

void *ThreeDEffect_obj::_hx_vtable = 0;

Dynamic ThreeDEffect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ThreeDEffect_obj > _hx_result = new ThreeDEffect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool ThreeDEffect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1491739b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1491739b;
	} else {
		return inClassId==(int)0x5ccf95d5;
	}
}


::hx::ObjectPtr< ThreeDEffect_obj > ThreeDEffect_obj::__new(::hx::Null< Float >  __o_xrotation,::hx::Null< Float >  __o_yrotation,::hx::Null< Float >  __o_zrotation,::hx::Null< Float >  __o_depth) {
	::hx::ObjectPtr< ThreeDEffect_obj > __this = new ThreeDEffect_obj();
	__this->__construct(__o_xrotation,__o_yrotation,__o_zrotation,__o_depth);
	return __this;
}

::hx::ObjectPtr< ThreeDEffect_obj > ThreeDEffect_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_xrotation,::hx::Null< Float >  __o_yrotation,::hx::Null< Float >  __o_zrotation,::hx::Null< Float >  __o_depth) {
	ThreeDEffect_obj *__this = (ThreeDEffect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThreeDEffect_obj), true, "ThreeDEffect"));
	*(void **)__this = ThreeDEffect_obj::_hx_vtable;
	__this->__construct(__o_xrotation,__o_yrotation,__o_zrotation,__o_depth);
	return __this;
}

ThreeDEffect_obj::ThreeDEffect_obj()
{
}

void ThreeDEffect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ThreeDEffect);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_END_CLASS();
}

void ThreeDEffect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
}

::hx::Val ThreeDEffect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return ::hx::Val( shader ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ThreeDEffect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::ThreeDShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ThreeDEffect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shader",25,bf,20,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ThreeDEffect_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ThreeDShader */ ,(int)offsetof(ThreeDEffect_obj,shader),HX_("shader",25,bf,20,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ThreeDEffect_obj_sStaticStorageInfo = 0;
#endif

static ::String ThreeDEffect_obj_sMemberFields[] = {
	HX_("shader",25,bf,20,1d),
	::String(null()) };

::hx::Class ThreeDEffect_obj::__mClass;

void ThreeDEffect_obj::__register()
{
	ThreeDEffect_obj _hx_dummy;
	ThreeDEffect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ThreeDEffect",77,b9,65,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ThreeDEffect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ThreeDEffect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThreeDEffect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThreeDEffect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

