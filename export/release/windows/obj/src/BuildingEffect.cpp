// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_BuildingEffect
#include <BuildingEffect.h>
#endif
#ifndef INCLUDED_BuildingShader
#include <BuildingShader.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d76db947fb11f576_16_new,"BuildingEffect","new",0x76603bb7,"BuildingEffect.new","Shaders.hx",16,0x469785f0)
static const Float _hx_array_data_ed249445_1[] = {
	(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_d76db947fb11f576_21_addAlpha,"BuildingEffect","addAlpha",0xb20fe6c6,"BuildingEffect.addAlpha","Shaders.hx",21,0x469785f0)
HX_LOCAL_STACK_FRAME(_hx_pos_d76db947fb11f576_26_setAlpha,"BuildingEffect","setAlpha",0x46e729a5,"BuildingEffect.setAlpha","Shaders.hx",26,0x469785f0)

void BuildingEffect_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d76db947fb11f576_16_new)
HXLINE(  17)		this->shader =  ::BuildingShader_obj::__alloc( HX_CTX );
HXLINE(  19)		this->shader->alphaShit->value = ::Array_obj< Float >::fromData( _hx_array_data_ed249445_1,1);
            	}

Dynamic BuildingEffect_obj::__CreateEmpty() { return new BuildingEffect_obj; }

void *BuildingEffect_obj::_hx_vtable = 0;

Dynamic BuildingEffect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BuildingEffect_obj > _hx_result = new BuildingEffect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BuildingEffect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1d8c27cd;
}

void BuildingEffect_obj::addAlpha(Float alpha){
            	HX_STACKFRAME(&_hx_pos_d76db947fb11f576_21_addAlpha)
HXLINE(  22)		::haxe::Log_obj::trace(this->shader->alphaShit->value->__get(0),::hx::SourceInfo(HX_("source/Shaders.hx",e4,4d,fc,d2),22,HX_("BuildingEffect",45,94,24,ed),HX_("addAlpha",7d,cd,f3,9a)));
HXLINE(  23)		::Array< Float > _hx_tmp = this->shader->alphaShit->value;
HXDLIN(  23)		int _hx_tmp1 = 0;
HXDLIN(  23)		_hx_tmp[_hx_tmp1] = (_hx_tmp->__get(_hx_tmp1) + alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildingEffect_obj,addAlpha,(void))

void BuildingEffect_obj::setAlpha(Float alpha){
            	HX_STACKFRAME(&_hx_pos_d76db947fb11f576_26_setAlpha)
HXDLIN(  26)		this->shader->alphaShit->value[0] = alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildingEffect_obj,setAlpha,(void))


::hx::ObjectPtr< BuildingEffect_obj > BuildingEffect_obj::__new() {
	::hx::ObjectPtr< BuildingEffect_obj > __this = new BuildingEffect_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BuildingEffect_obj > BuildingEffect_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BuildingEffect_obj *__this = (BuildingEffect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BuildingEffect_obj), true, "BuildingEffect"));
	*(void **)__this = BuildingEffect_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BuildingEffect_obj::BuildingEffect_obj()
{
}

void BuildingEffect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BuildingEffect);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_END_CLASS();
}

void BuildingEffect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
}

::hx::Val BuildingEffect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return ::hx::Val( shader ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addAlpha") ) { return ::hx::Val( addAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAlpha") ) { return ::hx::Val( setAlpha_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BuildingEffect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::BuildingShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BuildingEffect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shader",25,bf,20,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BuildingEffect_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::BuildingShader */ ,(int)offsetof(BuildingEffect_obj,shader),HX_("shader",25,bf,20,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BuildingEffect_obj_sStaticStorageInfo = 0;
#endif

static ::String BuildingEffect_obj_sMemberFields[] = {
	HX_("shader",25,bf,20,1d),
	HX_("addAlpha",7d,cd,f3,9a),
	HX_("setAlpha",5c,10,cb,2f),
	::String(null()) };

::hx::Class BuildingEffect_obj::__mClass;

void BuildingEffect_obj::__register()
{
	BuildingEffect_obj _hx_dummy;
	BuildingEffect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("BuildingEffect",45,94,24,ed);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BuildingEffect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BuildingEffect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuildingEffect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuildingEffect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

