// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Effect
#include <Effect.h>
#endif
#ifndef INCLUDED_Grain
#include <Grain.h>
#endif
#ifndef INCLUDED_GrainEffect
#include <GrainEffect.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dafce6f78169d04c_273_new,"GrainEffect","new",0x58dd24fe,"GrainEffect.new","Shaders.hx",273,0x469785f0)
HX_LOCAL_STACK_FRAME(_hx_pos_dafce6f78169d04c_282_update,"GrainEffect","update",0x5878682b,"GrainEffect.update","Shaders.hx",282,0x469785f0)

void GrainEffect_obj::__construct(Float grainsize,Float lumamount,bool lockAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_dafce6f78169d04c_273_new)
HXLINE( 274)		this->shader =  ::Grain_obj::__alloc( HX_CTX );
HXLINE( 275)		this->shader->lumamount->value = ::Array_obj< Float >::__new(1)->init(0,lumamount);
HXLINE( 276)		this->shader->grainsize->value = ::Array_obj< Float >::__new(1)->init(0,grainsize);
HXLINE( 277)		this->shader->lockAlpha->value = ::Array_obj< bool >::__new(1)->init(0,lockAlpha);
HXLINE( 278)		Float _hx_tmp = ::flixel::FlxG_obj::random->_hx_float(0,8,null());
HXDLIN( 278)		this->shader->uTime->value = ::Array_obj< Float >::__new(1)->init(0,_hx_tmp);
HXLINE( 279)		::PlayState_obj::instance->shaderUpdates->push(this->update_dyn());
            	}

Dynamic GrainEffect_obj::__CreateEmpty() { return new GrainEffect_obj; }

void *GrainEffect_obj::_hx_vtable = 0;

Dynamic GrainEffect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GrainEffect_obj > _hx_result = new GrainEffect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool GrainEffect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b8c86a0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0b8c86a0;
	} else {
		return inClassId==(int)0x5ccf95d5;
	}
}

void GrainEffect_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_dafce6f78169d04c_282_update)
HXDLIN( 282)		::Array< Float > _hx_tmp = this->shader->uTime->value;
HXDLIN( 282)		int _hx_tmp1 = 0;
HXDLIN( 282)		_hx_tmp[_hx_tmp1] = (_hx_tmp->__get(_hx_tmp1) + elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GrainEffect_obj,update,(void))


::hx::ObjectPtr< GrainEffect_obj > GrainEffect_obj::__new(Float grainsize,Float lumamount,bool lockAlpha) {
	::hx::ObjectPtr< GrainEffect_obj > __this = new GrainEffect_obj();
	__this->__construct(grainsize,lumamount,lockAlpha);
	return __this;
}

::hx::ObjectPtr< GrainEffect_obj > GrainEffect_obj::__alloc(::hx::Ctx *_hx_ctx,Float grainsize,Float lumamount,bool lockAlpha) {
	GrainEffect_obj *__this = (GrainEffect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GrainEffect_obj), true, "GrainEffect"));
	*(void **)__this = GrainEffect_obj::_hx_vtable;
	__this->__construct(grainsize,lumamount,lockAlpha);
	return __this;
}

GrainEffect_obj::GrainEffect_obj()
{
}

void GrainEffect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GrainEffect);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_END_CLASS();
}

void GrainEffect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
}

::hx::Val GrainEffect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return ::hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GrainEffect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::Grain >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GrainEffect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shader",25,bf,20,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GrainEffect_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Grain */ ,(int)offsetof(GrainEffect_obj,shader),HX_("shader",25,bf,20,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GrainEffect_obj_sStaticStorageInfo = 0;
#endif

static ::String GrainEffect_obj_sMemberFields[] = {
	HX_("shader",25,bf,20,1d),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class GrainEffect_obj::__mClass;

void GrainEffect_obj::__register()
{
	GrainEffect_obj _hx_dummy;
	GrainEffect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("GrainEffect",0c,8e,73,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GrainEffect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GrainEffect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GrainEffect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GrainEffect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

