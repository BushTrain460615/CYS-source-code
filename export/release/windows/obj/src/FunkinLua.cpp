// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_BloomEffect
#include <BloomEffect.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChromaticAberrationEffect
#include <ChromaticAberrationEffect.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CustomFadeTransition
#include <CustomFadeTransition.h>
#endif
#ifndef INCLUDED_DialogueBoxPsych
#include <DialogueBoxPsych.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_DistortBGEffect
#include <DistortBGEffect.h>
#endif
#ifndef INCLUDED_Effect
#include <Effect.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_FunkinLua
#include <FunkinLua.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GlitchEffect
#include <GlitchEffect.h>
#endif
#ifndef INCLUDED_GrainEffect
#include <GrainEffect.h>
#endif
#ifndef INCLUDED_GreyscaleEffect
#include <GreyscaleEffect.h>
#endif
#ifndef INCLUDED_InvertColorsEffect
#include <InvertColorsEffect.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModchartSprite
#include <ModchartSprite.h>
#endif
#ifndef INCLUDED_ModchartText
#include <ModchartText.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PulseEffect
#include <PulseEffect.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_ScanlineEffect
#include <ScanlineEffect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_ThreeDEffect
#include <ThreeDEffect.h>
#endif
#ifndef INCLUDED_TiltshiftEffect
#include <TiltshiftEffect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_VCRDistortionEffect
#include <VCRDistortionEffect.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_animateatlas_AtlasFrameMaker
#include <animateatlas/AtlasFrameMaker.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Convert
#include <llua/Convert.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_45_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",45,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_177_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",177,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_208_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",208,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_244_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",244,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_263_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",263,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_282_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",282,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_297_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",297,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_312_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",312,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_325_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",325,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_336_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",336,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_349_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",349,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_367_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",367,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_395_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",395,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_399_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",399,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_408_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",408,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_412_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",412,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_421_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",421,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_425_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",425,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_434_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",434,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_438_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",438,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_447_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",447,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_451_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",451,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_460_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",460,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_469_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",469,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_480_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",480,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_487_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",487,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_494_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",494,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_501_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",501,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_508_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",508,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_515_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",515,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_522_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",522,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_529_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",529,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_536_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",536,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_548_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",548,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_558_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",558,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_568_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",568,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_575_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",575,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_582_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",582,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_589_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",589,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_598_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",598,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_601_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",601,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_603_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",603,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_612_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",612,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_648_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",648,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_652_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",652,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_656_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",656,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_660_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",660,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_664_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",664,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_668_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",668,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_674_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",674,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_677_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",677,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_680_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",680,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_683_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",683,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_687_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",687,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_702_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",702,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_713_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",713,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_724_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",724,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_733_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",733,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_736_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",736,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_738_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",738,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_746_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",746,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_748_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",748,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_752_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",752,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_756_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",756,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_779_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",779,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_783_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",783,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_793_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",793,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_803_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",803,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_813_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",813,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_822_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",822,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_830_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",830,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_833_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",833,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_838_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",838,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_844_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",844,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_847_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",847,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_850_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",850,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_852_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",852,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_856_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",856,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_861_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",861,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_874_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",874,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_881_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",881,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_892_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",892,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_914_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",914,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_928_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",928,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_946_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",946,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_970_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",970,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_982_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",982,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_994_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",994,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1023_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1023,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1039_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1039,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1055_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1055,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1069_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1069,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1076_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1076,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1097_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1097,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1115_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1115,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1129_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1129,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1156_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1156,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1178_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1178,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1195_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1195,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1204_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1204,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1214_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1214,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1216_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1216,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1242_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1242,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1257_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1257,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1259_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1259,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1265_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1265,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1274_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1274,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1280_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1280,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1285_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1285,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1290_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1290,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1298_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1298,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1305_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1305,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1317_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1317,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1328_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1328,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1336_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1336,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1343_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1343,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1354_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1354,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1362_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1362,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1374_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1374,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1380_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1380,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1387_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1387,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1394_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1394,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1401_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1401,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1408_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1408,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1419_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1419,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1429_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1429,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1436_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1436,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1443_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1443,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1458_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1458,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1466_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1466,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1474_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1474,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1482_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1482,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1492_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1492,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1501_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1501,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1524_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1524,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1533_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1533,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1543_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1543,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1558_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1558,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1564_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1564,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1573_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1573,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1579_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1579,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1587_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1587,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1602_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1602,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1617_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1617,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1622_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1622,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1633_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1633,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1639_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1639,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1644_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1644,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1649_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1649,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1654_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1654,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1659_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1659,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1664_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1664,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1669_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1669,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1674_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1674,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1679_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1679,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1684_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1684,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1689_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1689,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1694_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1694,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1698_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1698,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1708_getTextObject,"FunkinLua","getTextObject",0x6333b0bb,"FunkinLua.getTextObject","FunkinLua.hx",1708,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1711_getGroupStuff,"FunkinLua","getGroupStuff",0x11e9e0a4,"FunkinLua.getGroupStuff","FunkinLua.hx",1711,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1723_setGroupStuff,"FunkinLua","setGroupStuff",0x56efc2b0,"FunkinLua.setGroupStuff","FunkinLua.hx",1723,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1736_resetTextTag,"FunkinLua","resetTextTag",0xe26aea85,"FunkinLua.resetTextTag","FunkinLua.hx",1736,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1750_resetSpriteTag,"FunkinLua","resetSpriteTag",0x3513682d,"FunkinLua.resetSpriteTag","FunkinLua.hx",1750,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1765_cancelTween,"FunkinLua","cancelTween",0xb2cc778a,"FunkinLua.cancelTween","FunkinLua.hx",1765,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1772_tweenShit,"FunkinLua","tweenShit",0xb737bc84,"FunkinLua.tweenShit","FunkinLua.hx",1772,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1790_cancelTimer,"FunkinLua","cancelTimer",0xa9918ce4,"FunkinLua.cancelTimer","FunkinLua.hx",1790,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1799_getFlxEaseByString,"FunkinLua","getFlxEaseByString",0x2e3003d9,"FunkinLua.getFlxEaseByString","FunkinLua.hx",1799,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1841_blendModeFromString,"FunkinLua","blendModeFromString",0x22a3cd48,"FunkinLua.blendModeFromString","FunkinLua.hx",1841,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1861_cameraFromString,"FunkinLua","cameraFromString",0x153f0d47,"FunkinLua.cameraFromString","FunkinLua.hx",1861,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1874_shaderFromString,"FunkinLua","shaderFromString",0x6d4f25c7,"FunkinLua.shaderFromString","FunkinLua.hx",1874,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1879_luaTrace,"FunkinLua","luaTrace",0x51031f14,"FunkinLua.luaTrace","FunkinLua.hx",1879,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1889_call,"FunkinLua","call",0x3eec4e85,"FunkinLua.call","FunkinLua.hx",1889,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1922_resultIsAllowed,"FunkinLua","resultIsAllowed",0x9872373a,"FunkinLua.resultIsAllowed","FunkinLua.hx",1922,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1931_set,"FunkinLua","set",0x0f40df9b,"FunkinLua.set","FunkinLua.hx",1931,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1943_getBool,"FunkinLua","getBool",0x82ab6859,"FunkinLua.getBool","FunkinLua.hx",1943,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1959_stop,"FunkinLua","stop",0x498e25e9,"FunkinLua.stop","FunkinLua.hx",1959,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_1976_getInstance,"FunkinLua","getInstance",0x7b084744,"FunkinLua.getInstance","FunkinLua.hx",1976,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_46_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",46,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_47_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",47,0x00117937)

void FunkinLua_obj::__construct(::String script){
            	HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_45_new)
HXLINE(  56)		this->accessedProps = null();
HXLINE(  54)		this->gonnaClose = false;
HXLINE(  53)		this->scriptName = HX_("",00,00,00,00);
HXLINE(  50)		this->lua = null();
HXLINE(  57)		 ::FunkinLua _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  59)		this->lua = luaL_newstate();
HXLINE(  60)		luaL_openlibs(this->lua);
HXLINE(  61)		{
HXLINE(  61)			 cpp::Reference<lua_State> l = this->lua;
HXDLIN(  61)			linc::callbacks::set_callbacks_function(::cpp::Function< int ( cpp::Reference<lua_State>,::String)>(::hx::AnyCast(&::llua::Lua_helper_obj::callback_handler )));
            		}
HXLINE(  66)		 ::Dynamic result = luaL_dofile(this->lua,script);
HXLINE(  67)		::String resultStr = linc::lua::tostring(this->lua,( (int)(result) ));
HXLINE(  68)		bool _hx_tmp;
HXDLIN(  68)		if (::hx::IsNotNull( resultStr )) {
HXLINE(  68)			_hx_tmp = ::hx::IsNotEq( result,0 );
            		}
            		else {
HXLINE(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  69)			::lime::app::Application_obj::current->_hx___window->alert(resultStr,HX_("Error on .LUA script!",e9,36,0d,31));
HXLINE(  70)			::haxe::Log_obj::trace((HX_("Error on .LUA script! ",17,d5,82,ba) + resultStr),::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),70,HX_("FunkinLua",e7,f3,7b,36),HX_("new",60,d0,53,00)));
HXLINE(  71)			this->lua = null();
HXLINE(  72)			return;
            		}
HXLINE(  74)		this->scriptName = script;
HXLINE(  75)		::haxe::Log_obj::trace((HX_("Lua file loaded succesfully:",7f,6a,cb,37) + script),::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),75,HX_("FunkinLua",e7,f3,7b,36),HX_("new",60,d0,53,00)));
HXLINE(  78)		this->accessedProps =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  84)		this->set(HX_("Function_Stop",c9,a5,e8,d3),::FunkinLua_obj::Function_Stop);
HXLINE(  85)		this->set(HX_("Function_Continue",ae,85,11,8b),::FunkinLua_obj::Function_Continue);
HXLINE(  86)		this->set(HX_("luaDebugMode",7e,06,20,4c),false);
HXLINE(  87)		this->set(HX_("luaDeprecatedWarnings",02,69,36,70),true);
HXLINE(  88)		this->set(HX_("inChartEditor",46,79,c6,62),false);
HXLINE(  91)		this->set(HX_("curBpm",3f,61,c3,3e),::Conductor_obj::bpm);
HXLINE(  92)		this->set(HX_("bpm",df,be,4a,00), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)));
HXLINE(  93)		this->set(HX_("scrollSpeed",3a,e0,46,cb), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)));
HXLINE(  94)		this->set(HX_("crochet",34,d5,b5,d4),::Conductor_obj::crochet);
HXLINE(  95)		this->set(HX_("stepCrochet",48,d7,ff,e6),::Conductor_obj::stepCrochet);
HXLINE(  96)		this->set(HX_("songLength",9b,3a,8c,fa),::flixel::FlxG_obj::sound->music->_length);
HXLINE(  97)		this->set(HX_("songName",c0,d0,d7,36), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)));
HXLINE(  98)		this->set(HX_("startedCountdown",30,57,28,9b),false);
HXLINE( 100)		this->set(HX_("isStoryMode",ae,68,02,07),::PlayState_obj::isStoryMode);
HXLINE( 101)		this->set(HX_("difficulty",3b,4e,8e,47),::PlayState_obj::storyDifficulty);
HXLINE( 102)		this->set(HX_("weekRaw",54,9e,f6,24),::PlayState_obj::storyWeek);
HXLINE( 103)		this->set(HX_("week",f4,5f,f5,4e),::WeekData_obj::weeksList->__get(::PlayState_obj::storyWeek));
HXLINE( 104)		this->set(HX_("seenCutscene",25,d1,95,b5),::PlayState_obj::seenCutscene);
HXLINE( 107)		this->set(HX_("require",65,e7,87,44),false);
HXLINE( 110)		this->set(HX_("cameraX",13,8a,31,e3),0);
HXLINE( 111)		this->set(HX_("cameraY",14,8a,31,e3),0);
HXLINE( 114)		this->set(HX_("screenWidth",fa,02,e8,81),::flixel::FlxG_obj::width);
HXLINE( 115)		this->set(HX_("screenHeight",73,10,6a,df),::flixel::FlxG_obj::height);
HXLINE( 118)		this->set(HX_("curBeat",16,53,29,ac),0);
HXLINE( 119)		this->set(HX_("curStep",ec,58,71,b7),0);
HXLINE( 121)		this->set(HX_("score",52,73,d9,78),0);
HXLINE( 122)		this->set(HX_("misses",6a,62,54,56),0);
HXLINE( 123)		this->set(HX_("hits",c0,42,0e,45),0);
HXLINE( 125)		this->set(HX_("rating",1d,34,8a,bb),0);
HXLINE( 126)		this->set(HX_("ratingName",08,a5,2b,05),HX_("",00,00,00,00));
HXLINE( 127)		this->set(HX_("ratingFC",9a,72,95,59),HX_("",00,00,00,00));
HXLINE( 128)		this->set(HX_("version",18,e7,f1,7c),::StringTools_obj::trim(::MainMenuState_obj::psychEngineVersion));
HXLINE( 130)		this->set(HX_("inGameOver",6b,97,d6,11),false);
HXLINE( 131)		this->set(HX_("mustHitSection",3b,5f,87,62),false);
HXLINE( 132)		this->set(HX_("altAnim",da,f3,f2,e5),false);
HXLINE( 133)		this->set(HX_("gfSection",86,e5,63,d4),false);
HXLINE( 136)		this->set(HX_("healthGainMult",cb,10,f5,d9),::PlayState_obj::instance->healthGain);
HXLINE( 137)		this->set(HX_("healthLossMult",2f,4c,b0,1e),::PlayState_obj::instance->healthLoss);
HXLINE( 138)		this->set(HX_("instakillOnMiss",94,43,20,66),::PlayState_obj::instance->instakillOnMiss);
HXLINE( 139)		this->set(HX_("botPlay",9b,27,83,4c),::PlayState_obj::instance->cpuControlled);
HXLINE( 140)		this->set(HX_("practice",bb,00,e7,a0),::PlayState_obj::instance->practiceMode);
HXLINE( 142)		{
HXLINE( 142)			{
HXLINE( 143)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 0),0);
HXLINE( 144)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 0),0);
HXLINE( 145)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 0),0);
HXLINE( 146)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 0),0);
            			}
HXLINE( 142)			{
HXLINE( 143)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 1),0);
HXLINE( 144)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 1),0);
HXLINE( 145)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 1),0);
HXLINE( 146)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 1),0);
            			}
HXLINE( 142)			{
HXLINE( 143)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 2),0);
HXLINE( 144)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 2),0);
HXLINE( 145)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 2),0);
HXLINE( 146)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 2),0);
            			}
HXLINE( 142)			{
HXLINE( 143)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 3),0);
HXLINE( 144)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 3),0);
HXLINE( 145)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 3),0);
HXLINE( 146)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 3),0);
            			}
            		}
HXLINE( 150)		this->set(HX_("defaultBoyfriendX",cf,cb,cd,d0),::PlayState_obj::instance->BF_X);
HXLINE( 151)		this->set(HX_("defaultBoyfriendY",d0,cb,cd,d0),::PlayState_obj::instance->BF_Y);
HXLINE( 152)		this->set(HX_("defaultOpponentX",1a,17,e2,6b),::PlayState_obj::instance->DAD_X);
HXLINE( 153)		this->set(HX_("defaultOpponentY",1b,17,e2,6b),::PlayState_obj::instance->DAD_Y);
HXLINE( 154)		this->set(HX_("defaultGirlfriendX",1d,56,56,66),::PlayState_obj::instance->GF_X);
HXLINE( 155)		this->set(HX_("defaultGirlfriendY",1e,56,56,66),::PlayState_obj::instance->GF_Y);
HXLINE( 158)		this->set(HX_("boyfriendName",d5,c4,d2,4c), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)));
HXLINE( 159)		this->set(HX_("dadName",32,04,eb,ce), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)));
HXLINE( 160)		this->set(HX_("gfName",0a,f4,79,1d), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("player3",b2,09,15,8a),::hx::paccDynamic)));
HXLINE( 163)		this->set(HX_("downscroll",ef,45,d4,4f),::ClientPrefs_obj::downScroll);
HXLINE( 164)		this->set(HX_("middlescroll",22,59,c4,2d),::ClientPrefs_obj::middleScroll);
HXLINE( 165)		this->set(HX_("framerate",8d,e5,4b,4e),::ClientPrefs_obj::framerate);
HXLINE( 166)		this->set(HX_("ghostTapping",c6,6a,da,10),::ClientPrefs_obj::ghostTapping);
HXLINE( 167)		this->set(HX_("hideHud",15,b9,3c,b7),::ClientPrefs_obj::hideHud);
HXLINE( 168)		this->set(HX_("timeBarType",a0,5d,bb,01),::ClientPrefs_obj::timeBarType);
HXLINE( 169)		this->set(HX_("scoreZoom",85,53,bc,e0),::ClientPrefs_obj::scoreZoom);
HXLINE( 170)		this->set(HX_("cameraZoomOnBeat",ad,fc,ca,a9),::ClientPrefs_obj::camZooms);
HXLINE( 171)		this->set(HX_("flashingLights",af,15,62,da),::ClientPrefs_obj::flashing);
HXLINE( 172)		this->set(HX_("noteOffset",25,a5,53,fe),::ClientPrefs_obj::noteOffset);
HXLINE( 173)		this->set(HX_("healthBarAlpha",47,c9,a0,80),::ClientPrefs_obj::healthBarAlpha);
HXLINE( 174)		this->set(HX_("noResetButton",60,f2,dd,d8),::ClientPrefs_obj::noReset);
HXLINE( 175)		this->set(HX_("lowQuality",8b,52,27,3e),::ClientPrefs_obj::lowQuality);
HXLINE( 177)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String luaFile, ::Dynamic __o_ignoreAlreadyRunning){
            		 ::Dynamic ignoreAlreadyRunning = __o_ignoreAlreadyRunning;
            		if (::hx::IsNull(__o_ignoreAlreadyRunning)) ignoreAlreadyRunning = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_177_new)
HXLINE( 178)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 179)				bool doPush = false;
HXLINE( 180)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 181)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 182)					doPush = true;
            				}
            				else {
HXLINE( 184)					::String file = cervix;
HXDLIN( 184)					if (::hx::IsNull( file )) {
HXLINE( 184)						file = HX_("",00,00,00,00);
            					}
HXDLIN( 184)					cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 185)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 186)						doPush = true;
            					}
            				}
HXLINE( 190)				if (doPush) {
HXLINE( 192)					if (!(( (bool)(ignoreAlreadyRunning) ))) {
HXLINE( 194)						int _g = 0;
HXDLIN( 194)						::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 194)						while((_g < _g1->length)){
HXLINE( 194)							 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 194)							_g = (_g + 1);
HXLINE( 196)							if ((luaInstance->scriptName == cervix)) {
HXLINE( 198)								_gthis->luaTrace(((HX_("The script \"",7c,38,52,43) + cervix) + HX_("\" is already running!",c2,b4,3c,35)),null(),null());
HXLINE( 199)								return;
            							}
            						}
            					}
HXLINE( 203)					::Array< ::Dynamic> _hx_tmp = ::PlayState_obj::instance->luaArray;
HXDLIN( 203)					_hx_tmp->push( ::FunkinLua_obj::__alloc( HX_CTX ,cervix));
HXLINE( 204)					return;
            				}
HXLINE( 206)				_gthis->luaTrace(HX_("Script doesn't exist!",fd,f4,0c,69),null(),null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 177)			 cpp::Reference<lua_State> l1 = this->lua;
HXDLIN( 177)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaScript",82,57,d1,5e), ::Dynamic(new _hx_Closure_0(_gthis)));
HXDLIN( 177)			linc::callbacks::add_callback_function(l1,HX_("addLuaScript",82,57,d1,5e));
            		}
HXLINE( 208)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String luaFile, ::Dynamic __o_ignoreAlreadyRunning){
            		 ::Dynamic ignoreAlreadyRunning = __o_ignoreAlreadyRunning;
            		if (::hx::IsNull(__o_ignoreAlreadyRunning)) ignoreAlreadyRunning = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_208_new)
HXLINE( 209)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 210)				bool doPush = false;
HXLINE( 211)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 212)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 213)					doPush = true;
            				}
            				else {
HXLINE( 215)					::String file = cervix;
HXDLIN( 215)					if (::hx::IsNull( file )) {
HXLINE( 215)						file = HX_("",00,00,00,00);
            					}
HXDLIN( 215)					cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 216)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 217)						doPush = true;
            					}
            				}
HXLINE( 221)				if (doPush) {
HXLINE( 223)					if (!(( (bool)(ignoreAlreadyRunning) ))) {
HXLINE( 225)						int _g = 0;
HXDLIN( 225)						::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 225)						while((_g < _g1->length)){
HXLINE( 225)							 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 225)							_g = (_g + 1);
HXLINE( 227)							if ((luaInstance->scriptName == cervix)) {
HXLINE( 231)								::PlayState_obj::instance->luaArray->remove(luaInstance);
HXLINE( 232)								return;
            							}
            						}
            					}
HXLINE( 236)					return;
            				}
HXLINE( 238)				_gthis->luaTrace(HX_("Script doesn't exist!",fd,f4,0c,69),null(),null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 208)			 cpp::Reference<lua_State> l2 = this->lua;
HXDLIN( 208)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaScript",ff,d0,9b,a0), ::Dynamic(new _hx_Closure_1(_gthis)));
HXDLIN( 208)			linc::callbacks::add_callback_function(l2,HX_("removeLuaScript",ff,d0,9b,a0));
            		}
HXLINE( 244)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			 ::Dynamic _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_244_new)
HXLINE( 245)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 246)				if ((killMe->length > 1)) {
HXLINE( 247)					 ::Dynamic coverMeInPiss = null();
HXLINE( 248)					if (::PlayState_obj::instance->modchartSprites->exists(killMe->__get(0))) {
HXLINE( 249)						coverMeInPiss = ::PlayState_obj::instance->modchartSprites->get(killMe->__get(0));
            					}
            					else {
HXLINE( 250)						if (::PlayState_obj::instance->modchartTexts->exists(killMe->__get(0))) {
HXLINE( 251)							coverMeInPiss = ::PlayState_obj::instance->modchartTexts->get(killMe->__get(0));
            						}
            						else {
HXLINE( 253)							 ::flixel::FlxState coverMeInPiss1;
HXDLIN( 253)							if (::PlayState_obj::instance->isDead) {
HXLINE( 253)								coverMeInPiss1 = ::GameOverSubstate_obj::instance;
            							}
            							else {
HXLINE( 253)								coverMeInPiss1 = ::PlayState_obj::instance;
            							}
HXDLIN( 253)							coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(0));
            						}
            					}
HXLINE( 256)					{
HXLINE( 256)						int _g = 1;
HXDLIN( 256)						int _g1 = (killMe->length - 1);
HXDLIN( 256)						while((_g < _g1)){
HXLINE( 256)							_g = (_g + 1);
HXDLIN( 256)							int i = (_g - 1);
HXLINE( 257)							coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            						}
            					}
HXLINE( 259)					return ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get((killMe->length - 1)));
            				}
HXLINE( 261)				 ::flixel::FlxState _hx_tmp;
HXDLIN( 261)				if (::PlayState_obj::instance->isDead) {
HXLINE( 261)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 261)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN( 261)				return ::Reflect_obj::getProperty(_hx_tmp,variable);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 244)			 cpp::Reference<lua_State> l3 = this->lua;
HXDLIN( 244)			::llua::Lua_helper_obj::callbacks->set(HX_("getProperty",0b,0b,2c,d2), ::Dynamic(new _hx_Closure_2()));
HXDLIN( 244)			linc::callbacks::add_callback_function(l3,HX_("getProperty",0b,0b,2c,d2));
            		}
HXLINE( 263)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            			void _hx_run(::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_263_new)
HXLINE( 264)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 265)				if ((killMe->length > 1)) {
HXLINE( 266)					 ::Dynamic coverMeInPiss = null();
HXLINE( 267)					if (::PlayState_obj::instance->modchartSprites->exists(killMe->__get(0))) {
HXLINE( 268)						coverMeInPiss = ::PlayState_obj::instance->modchartSprites->get(killMe->__get(0));
            					}
            					else {
HXLINE( 269)						if (::PlayState_obj::instance->modchartTexts->exists(killMe->__get(0))) {
HXLINE( 270)							coverMeInPiss = ::PlayState_obj::instance->modchartTexts->get(killMe->__get(0));
            						}
            						else {
HXLINE( 272)							 ::flixel::FlxState coverMeInPiss1;
HXDLIN( 272)							if (::PlayState_obj::instance->isDead) {
HXLINE( 272)								coverMeInPiss1 = ::GameOverSubstate_obj::instance;
            							}
            							else {
HXLINE( 272)								coverMeInPiss1 = ::PlayState_obj::instance;
            							}
HXDLIN( 272)							coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(0));
            						}
            					}
HXLINE( 275)					{
HXLINE( 275)						int _g = 1;
HXDLIN( 275)						int _g1 = (killMe->length - 1);
HXDLIN( 275)						while((_g < _g1)){
HXLINE( 275)							_g = (_g + 1);
HXDLIN( 275)							int i = (_g - 1);
HXLINE( 276)							coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            						}
            					}
HXLINE( 278)					::Reflect_obj::setProperty(coverMeInPiss,killMe->__get((killMe->length - 1)),value);
HXDLIN( 278)					return;
            				}
HXLINE( 280)				 ::flixel::FlxState _hx_tmp;
HXDLIN( 280)				if (::PlayState_obj::instance->isDead) {
HXLINE( 280)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 280)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN( 280)				::Reflect_obj::setProperty(_hx_tmp,variable,value);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 263)			 cpp::Reference<lua_State> l4 = this->lua;
HXDLIN( 263)			::llua::Lua_helper_obj::callbacks->set(HX_("setProperty",17,12,99,dc), ::Dynamic(new _hx_Closure_3()));
HXDLIN( 263)			linc::callbacks::add_callback_function(l4,HX_("setProperty",17,12,99,dc));
            		}
HXLINE( 282)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::FunkinLua,_gthis) HXARGC(3)
            			 ::Dynamic _hx_run(::String obj,int index, ::Dynamic variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_282_new)
HXLINE( 283)				 ::flixel::FlxState _hx_tmp;
HXDLIN( 283)				if (::PlayState_obj::instance->isDead) {
HXLINE( 283)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 283)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN( 283)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_hx_tmp,obj),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 284)					 ::FunkinLua _gthis1 = _gthis;
HXDLIN( 284)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 284)					if (::PlayState_obj::instance->isDead) {
HXLINE( 284)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 284)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 284)					return _gthis1->getGroupStuff( ::Dynamic(::Reflect_obj::getProperty(_hx_tmp,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ));
            				}
HXLINE( 287)				 ::flixel::FlxState leArray;
HXDLIN( 287)				if (::PlayState_obj::instance->isDead) {
HXLINE( 287)					leArray = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 287)					leArray = ::PlayState_obj::instance;
            				}
HXDLIN( 287)				 ::Dynamic leArray1 = ::Reflect_obj::getProperty(leArray,obj)->__GetItem(index);
HXLINE( 288)				if (::hx::IsNotNull( leArray1 )) {
HXLINE( 289)					if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 290)						return leArray1->__GetItem(( (int)(variable) ));
            					}
HXLINE( 292)					return _gthis->getGroupStuff(leArray1,( (::String)(variable) ));
            				}
HXLINE( 294)				_gthis->luaTrace(((((HX_("Object #",a2,c4,dd,5c) + index) + HX_(" from group: ",0f,87,ba,2b)) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 295)				return null();
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 282)			 cpp::Reference<lua_State> l5 = this->lua;
HXDLIN( 282)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromGroup",ea,38,fe,ee), ::Dynamic(new _hx_Closure_4(_gthis)));
HXDLIN( 282)			linc::callbacks::add_callback_function(l5,HX_("getPropertyFromGroup",ea,38,fe,ee));
            		}
HXLINE( 297)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String obj,int index, ::Dynamic variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_297_new)
HXLINE( 298)				 ::flixel::FlxState _hx_tmp;
HXDLIN( 298)				if (::PlayState_obj::instance->isDead) {
HXLINE( 298)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 298)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN( 298)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_hx_tmp,obj),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 299)					 ::FunkinLua _gthis1 = _gthis;
HXDLIN( 299)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 299)					if (::PlayState_obj::instance->isDead) {
HXLINE( 299)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 299)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 299)					_gthis1->setGroupStuff( ::Dynamic(::Reflect_obj::getProperty(_hx_tmp,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),value);
HXLINE( 300)					return;
            				}
HXLINE( 303)				 ::flixel::FlxState leArray;
HXDLIN( 303)				if (::PlayState_obj::instance->isDead) {
HXLINE( 303)					leArray = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 303)					leArray = ::PlayState_obj::instance;
            				}
HXDLIN( 303)				 ::Dynamic leArray1 = ::Reflect_obj::getProperty(leArray,obj)->__GetItem(index);
HXLINE( 304)				if (::hx::IsNotNull( leArray1 )) {
HXLINE( 305)					if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 306)						leArray1->__SetItem(( (int)(variable) ),value);
HXLINE( 307)						return;
            					}
HXLINE( 309)					_gthis->setGroupStuff(leArray1,( (::String)(variable) ),value);
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 297)			 cpp::Reference<lua_State> l6 = this->lua;
HXDLIN( 297)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromGroup",5e,f0,b5,bb), ::Dynamic(new _hx_Closure_5(_gthis)));
HXDLIN( 297)			linc::callbacks::add_callback_function(l6,HX_("setPropertyFromGroup",5e,f0,b5,bb));
            		}
HXLINE( 312)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            			void _hx_run(::String obj,int index, ::Dynamic __o_dontDestroy){
            		bool dontDestroy = __o_dontDestroy.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_312_new)
HXLINE( 313)				 ::flixel::FlxState _hx_tmp;
HXDLIN( 313)				if (::PlayState_obj::instance->isDead) {
HXLINE( 313)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 313)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN( 313)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_hx_tmp,obj),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 314)					 ::flixel::FlxState sex;
HXDLIN( 314)					if (::PlayState_obj::instance->isDead) {
HXLINE( 314)						sex = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 314)						sex = ::PlayState_obj::instance;
            					}
HXDLIN( 314)					 ::Dynamic sex1 =  ::Dynamic(::Reflect_obj::getProperty(sex,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index);
HXLINE( 315)					if (!(dontDestroy)) {
HXLINE( 316)						sex1->__Field(HX_("kill",9e,df,09,47),::hx::paccDynamic)();
            					}
HXLINE( 317)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 317)					if (::PlayState_obj::instance->isDead) {
HXLINE( 317)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 317)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 317)					::Reflect_obj::getProperty(_hx_tmp,obj)->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(sex1,true);
HXLINE( 318)					if (!(dontDestroy)) {
HXLINE( 319)						sex1->__Field(HX_("destroy",fa,2c,86,24),::hx::paccDynamic)();
            					}
HXLINE( 320)					return;
            				}
HXLINE( 322)				 ::flixel::FlxState _hx_tmp1;
HXDLIN( 322)				if (::PlayState_obj::instance->isDead) {
HXLINE( 322)					_hx_tmp1 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 322)					_hx_tmp1 = ::PlayState_obj::instance;
            				}
HXDLIN( 322)				 ::Dynamic _hx_tmp2 =  ::Dynamic(::Reflect_obj::getProperty(_hx_tmp1,obj)->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic));
HXDLIN( 322)				 ::flixel::FlxState _hx_tmp3;
HXDLIN( 322)				if (::PlayState_obj::instance->isDead) {
HXLINE( 322)					_hx_tmp3 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 322)					_hx_tmp3 = ::PlayState_obj::instance;
            				}
HXDLIN( 322)				_hx_tmp2(::Reflect_obj::getProperty(_hx_tmp3,obj)->__GetItem(index));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 312)			 cpp::Reference<lua_State> l7 = this->lua;
HXDLIN( 312)			::llua::Lua_helper_obj::callbacks->set(HX_("removeFromGroup",91,38,9c,8f), ::Dynamic(new _hx_Closure_6()));
HXDLIN( 312)			linc::callbacks::add_callback_function(l7,HX_("removeFromGroup",91,38,9c,8f));
            		}
HXLINE( 325)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(2)
            			 ::Dynamic _hx_run(::String classVar,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_325_new)
HXLINE( 326)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 327)				if ((killMe->length > 1)) {
HXLINE( 328)					::hx::Class coverMeInPiss = ::Type_obj::resolveClass(classVar);
HXDLIN( 328)					 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE( 329)					{
HXLINE( 329)						int _g = 1;
HXDLIN( 329)						int _g1 = (killMe->length - 1);
HXDLIN( 329)						while((_g < _g1)){
HXLINE( 329)							_g = (_g + 1);
HXDLIN( 329)							int i = (_g - 1);
HXLINE( 330)							coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            						}
            					}
HXLINE( 332)					return ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)));
            				}
HXLINE( 334)				return ::Reflect_obj::getProperty(::Type_obj::resolveClass(classVar),variable);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 325)			 cpp::Reference<lua_State> l8 = this->lua;
HXDLIN( 325)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromClass",e3,fd,61,9d), ::Dynamic(new _hx_Closure_7()));
HXDLIN( 325)			linc::callbacks::add_callback_function(l8,HX_("getPropertyFromClass",e3,fd,61,9d));
            		}
HXLINE( 336)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(3)
            			void _hx_run(::String classVar,::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_336_new)
HXLINE( 337)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 338)				if ((killMe->length > 1)) {
HXLINE( 339)					::hx::Class coverMeInPiss = ::Type_obj::resolveClass(classVar);
HXDLIN( 339)					 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE( 340)					{
HXLINE( 340)						int _g = 1;
HXDLIN( 340)						int _g1 = (killMe->length - 1);
HXDLIN( 340)						while((_g < _g1)){
HXLINE( 340)							_g = (_g + 1);
HXDLIN( 340)							int i = (_g - 1);
HXLINE( 341)							coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            						}
            					}
HXLINE( 343)					::Reflect_obj::setProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)),value);
HXDLIN( 343)					return;
            				}
HXLINE( 345)				::Reflect_obj::setProperty(::Type_obj::resolveClass(classVar),variable,value);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 336)			 cpp::Reference<lua_State> l9 = this->lua;
HXDLIN( 336)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromClass",57,b5,19,6a), ::Dynamic(new _hx_Closure_8()));
HXDLIN( 336)			linc::callbacks::add_callback_function(l9,HX_("setPropertyFromClass",57,b5,19,6a));
            		}
HXLINE( 349)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::FunkinLua,_gthis) HXARGC(1)
            			int _hx_run(::String obj){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_349_new)
HXLINE( 350)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE( 352)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 352)					if (::PlayState_obj::instance->isDead) {
HXLINE( 352)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 352)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 352)					::Array< ::Dynamic> _hx_tmp1 = _hx_tmp->members;
HXDLIN( 352)					return _hx_tmp1->indexOf(::PlayState_obj::instance->modchartSprites->get(obj),null());
            				}
            				else {
HXLINE( 354)					if (::PlayState_obj::instance->modchartTexts->exists(obj)) {
HXLINE( 356)						 ::flixel::FlxState _hx_tmp;
HXDLIN( 356)						if (::PlayState_obj::instance->isDead) {
HXLINE( 356)							_hx_tmp = ::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE( 356)							_hx_tmp = ::PlayState_obj::instance;
            						}
HXDLIN( 356)						::Array< ::Dynamic> _hx_tmp1 = _hx_tmp->members;
HXDLIN( 356)						return _hx_tmp1->indexOf(::PlayState_obj::instance->modchartTexts->get(obj),null());
            					}
            				}
HXLINE( 359)				 ::flixel::FlxState leObj;
HXDLIN( 359)				if (::PlayState_obj::instance->isDead) {
HXLINE( 359)					leObj = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 359)					leObj = ::PlayState_obj::instance;
            				}
HXDLIN( 359)				 ::flixel::FlxBasic leObj1 = ( ( ::flixel::FlxBasic)(::Reflect_obj::getProperty(leObj,obj)) );
HXLINE( 360)				if (::hx::IsNotNull( leObj1 )) {
HXLINE( 362)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 362)					if (::PlayState_obj::instance->isDead) {
HXLINE( 362)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 362)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 362)					return _hx_tmp->members->indexOf(leObj1,null());
            				}
HXLINE( 364)				_gthis->luaTrace(((HX_("Object ",61,90,a0,4f) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 365)				return -1;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 349)			 cpp::Reference<lua_State> l10 = this->lua;
HXDLIN( 349)			::llua::Lua_helper_obj::callbacks->set(HX_("getObjectOrder",59,60,ee,2b), ::Dynamic(new _hx_Closure_9(_gthis)));
HXDLIN( 349)			linc::callbacks::add_callback_function(l10,HX_("getObjectOrder",59,60,ee,2b));
            		}
HXLINE( 367)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String obj,int position){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_367_new)
HXLINE( 368)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE( 369)					 ::ModchartSprite spr = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXLINE( 370)					if (spr->wasAdded) {
HXLINE( 371)						 ::flixel::FlxState _hx_tmp;
HXDLIN( 371)						if (::PlayState_obj::instance->isDead) {
HXLINE( 371)							_hx_tmp = ::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE( 371)							_hx_tmp = ::PlayState_obj::instance;
            						}
HXDLIN( 371)						_hx_tmp->remove(spr,true).StaticCast<  ::flixel::FlxBasic >();
            					}
HXLINE( 373)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 373)					if (::PlayState_obj::instance->isDead) {
HXLINE( 373)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 373)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 373)					_hx_tmp->insert(position,spr).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 374)					return;
            				}
HXLINE( 376)				if (::PlayState_obj::instance->modchartTexts->exists(obj)) {
HXLINE( 377)					 ::ModchartText spr = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(obj)) );
HXLINE( 378)					if (spr->wasAdded) {
HXLINE( 379)						 ::flixel::FlxState _hx_tmp;
HXDLIN( 379)						if (::PlayState_obj::instance->isDead) {
HXLINE( 379)							_hx_tmp = ::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE( 379)							_hx_tmp = ::PlayState_obj::instance;
            						}
HXDLIN( 379)						_hx_tmp->remove(spr,true).StaticCast<  ::flixel::FlxBasic >();
            					}
HXLINE( 381)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 381)					if (::PlayState_obj::instance->isDead) {
HXLINE( 381)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 381)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 381)					_hx_tmp->insert(position,spr).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 382)					return;
            				}
HXLINE( 385)				 ::flixel::FlxState leObj;
HXDLIN( 385)				if (::PlayState_obj::instance->isDead) {
HXLINE( 385)					leObj = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 385)					leObj = ::PlayState_obj::instance;
            				}
HXDLIN( 385)				 ::flixel::FlxBasic leObj1 = ( ( ::flixel::FlxBasic)(::Reflect_obj::getProperty(leObj,obj)) );
HXLINE( 386)				if (::hx::IsNotNull( leObj1 )) {
HXLINE( 387)					 ::flixel::FlxState _hx_tmp;
HXDLIN( 387)					if (::PlayState_obj::instance->isDead) {
HXLINE( 387)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 387)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN( 387)					_hx_tmp->remove(leObj1,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 388)					 ::flixel::FlxState _hx_tmp1;
HXDLIN( 388)					if (::PlayState_obj::instance->isDead) {
HXLINE( 388)						_hx_tmp1 = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE( 388)						_hx_tmp1 = ::PlayState_obj::instance;
            					}
HXDLIN( 388)					_hx_tmp1->insert(position,leObj1).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 389)					return;
            				}
HXLINE( 391)				_gthis->luaTrace(((HX_("Object ",61,90,a0,4f) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 367)			 cpp::Reference<lua_State> l11 = this->lua;
HXDLIN( 367)			::llua::Lua_helper_obj::callbacks->set(HX_("setObjectOrder",cd,48,0e,4c), ::Dynamic(new _hx_Closure_10(_gthis)));
HXDLIN( 367)			linc::callbacks::add_callback_function(l11,HX_("setObjectOrder",cd,48,0e,4c));
            		}
HXLINE( 395)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_395_new)
HXLINE( 396)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 397)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_399_new)
HXLINE( 400)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 401)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 398)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 398)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_11(tag)))));
HXDLIN( 398)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 405)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 395)			 cpp::Reference<lua_State> l12 = this->lua;
HXDLIN( 395)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenX",78,f9,3b,bd), ::Dynamic(new _hx_Closure_12(_gthis)));
HXDLIN( 395)			linc::callbacks::add_callback_function(l12,HX_("doTweenX",78,f9,3b,bd));
            		}
HXLINE( 408)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_408_new)
HXLINE( 409)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 410)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_412_new)
HXLINE( 413)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 414)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 411)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 411)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_13(tag)))));
HXDLIN( 411)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 418)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 408)			 cpp::Reference<lua_State> l13 = this->lua;
HXDLIN( 408)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenY",79,f9,3b,bd), ::Dynamic(new _hx_Closure_14(_gthis)));
HXDLIN( 408)			linc::callbacks::add_callback_function(l13,HX_("doTweenY",79,f9,3b,bd));
            		}
HXLINE( 421)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_421_new)
HXLINE( 422)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 423)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_425_new)
HXLINE( 426)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 427)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 424)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 424)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_15(tag)))));
HXDLIN( 424)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 431)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 421)			 cpp::Reference<lua_State> l14 = this->lua;
HXDLIN( 421)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenAngle",d3,bc,0e,60), ::Dynamic(new _hx_Closure_16(_gthis)));
HXDLIN( 421)			linc::callbacks::add_callback_function(l14,HX_("doTweenAngle",d3,bc,0e,60));
            		}
HXLINE( 434)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_434_new)
HXLINE( 435)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 436)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_438_new)
HXLINE( 439)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 440)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 437)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 437)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_17(tag)))));
HXDLIN( 437)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 444)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 434)			 cpp::Reference<lua_State> l15 = this->lua;
HXDLIN( 434)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenAlpha",5e,20,c3,5e), ::Dynamic(new _hx_Closure_18(_gthis)));
HXDLIN( 434)			linc::callbacks::add_callback_function(l15,HX_("doTweenAlpha",5e,20,c3,5e));
            		}
HXLINE( 447)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_447_new)
HXLINE( 448)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 449)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_451_new)
HXLINE( 452)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 453)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 450)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 450)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_19(tag)))));
HXDLIN( 450)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 457)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 447)			 cpp::Reference<lua_State> l16 = this->lua;
HXDLIN( 447)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenZoom",13,4a,be,e0), ::Dynamic(new _hx_Closure_20(_gthis)));
HXDLIN( 447)			linc::callbacks::add_callback_function(l16,HX_("doTweenZoom",13,4a,be,e0));
            		}
HXLINE( 460)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_22, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars,::String targetColor,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_460_new)
HXLINE( 461)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 462)				if (::hx::IsNotNull( penisExam )) {
HXLINE( 463)					int color = ( (int)(::Std_obj::parseInt(targetColor)) );
HXLINE( 464)					if (!(::StringTools_obj::startsWith(targetColor,HX_("0x",48,2a,00,00)))) {
HXLINE( 464)						color = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + targetColor))) );
            					}
HXLINE( 466)					int curColor = ( (int)(penisExam->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) );
HXLINE( 467)					{
HXLINE( 467)						Float Value = ( (Float)(penisExam->__Field(HX_("alpha",5e,a7,96,21),::hx::paccDynamic)) );
HXDLIN( 467)						{
HXLINE( 467)							int Value1 = ::Math_obj::round((Value * ( (Float)(255) )));
HXDLIN( 467)							curColor = (curColor & 16777215);
HXDLIN( 467)							int curColor1;
HXDLIN( 467)							if ((Value1 > 255)) {
HXLINE( 467)								curColor1 = 255;
            							}
            							else {
HXLINE( 467)								if ((Value1 < 0)) {
HXLINE( 467)									curColor1 = 0;
            								}
            								else {
HXLINE( 467)									curColor1 = Value1;
            								}
            							}
HXDLIN( 467)							curColor = (curColor | (curColor1 << 24));
            						}
            					}
HXLINE( 468)					{
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21,::String,tag) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_469_new)
HXLINE( 470)							::PlayState_obj::instance->modchartTweens->remove(tag);
HXLINE( 471)							::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 468)						::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 468)						 ::flixel::tweens::FlxTween value = ::flixel::tweens::FlxTween_obj::color(( ( ::flixel::FlxSprite)(penisExam) ),duration,curColor,color, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_21(tag)))));
HXDLIN( 468)						( ( ::haxe::ds::StringMap)(this1) )->set(tag,value);
            					}
            				}
            				else {
HXLINE( 475)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 460)			 cpp::Reference<lua_State> l17 = this->lua;
HXDLIN( 460)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenColor",63,ea,88,87), ::Dynamic(new _hx_Closure_22(_gthis)));
HXDLIN( 460)			linc::callbacks::add_callback_function(l17,HX_("doTweenColor",63,ea,88,87));
            		}
HXLINE( 480)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_24, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_480_new)
HXLINE( 481)				_gthis->cancelTween(tag);
HXLINE( 482)				if ((note < 0)) {
HXLINE( 482)					note = 0;
            				}
HXLINE( 483)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE( 485)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_23,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_487_new)
HXLINE( 488)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 489)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 486)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 486)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_23(tag)))));
HXDLIN( 486)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 480)			 cpp::Reference<lua_State> l18 = this->lua;
HXDLIN( 480)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenX",1f,81,38,c7), ::Dynamic(new _hx_Closure_24(_gthis)));
HXDLIN( 480)			linc::callbacks::add_callback_function(l18,HX_("noteTweenX",1f,81,38,c7));
            		}
HXLINE( 494)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_26, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_494_new)
HXLINE( 495)				_gthis->cancelTween(tag);
HXLINE( 496)				if ((note < 0)) {
HXLINE( 496)					note = 0;
            				}
HXLINE( 497)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE( 499)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_501_new)
HXLINE( 502)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 503)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 500)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 500)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_25(tag)))));
HXDLIN( 500)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 494)			 cpp::Reference<lua_State> l19 = this->lua;
HXDLIN( 494)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenY",20,81,38,c7), ::Dynamic(new _hx_Closure_26(_gthis)));
HXDLIN( 494)			linc::callbacks::add_callback_function(l19,HX_("noteTweenY",20,81,38,c7));
            		}
HXLINE( 508)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_28, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_508_new)
HXLINE( 509)				_gthis->cancelTween(tag);
HXLINE( 510)				if ((note < 0)) {
HXLINE( 510)					note = 0;
            				}
HXLINE( 511)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE( 513)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_515_new)
HXLINE( 516)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 517)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 514)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 514)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_27(tag)))));
HXDLIN( 514)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 508)			 cpp::Reference<lua_State> l20 = this->lua;
HXDLIN( 508)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAngle",fa,a3,45,58), ::Dynamic(new _hx_Closure_28(_gthis)));
HXDLIN( 508)			linc::callbacks::add_callback_function(l20,HX_("noteTweenAngle",fa,a3,45,58));
            		}
HXLINE( 522)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_30, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_522_new)
HXLINE( 523)				_gthis->cancelTween(tag);
HXLINE( 524)				if ((note < 0)) {
HXLINE( 524)					note = 0;
            				}
HXLINE( 525)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE( 527)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_529_new)
HXLINE( 530)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 531)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 528)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 528)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("direction",3f,62,40,10),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_29(tag)))));
HXDLIN( 528)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 522)			 cpp::Reference<lua_State> l21 = this->lua;
HXDLIN( 522)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenDirection",e6,61,74,1f), ::Dynamic(new _hx_Closure_30(_gthis)));
HXDLIN( 522)			linc::callbacks::add_callback_function(l21,HX_("noteTweenDirection",e6,61,74,1f));
            		}
HXLINE( 536)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_31) HXARGC(1)
            			bool _hx_run(::String button){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_536_new)
HXLINE( 537)				bool boobs = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
HXLINE( 538)				::String _hx_switch_0 = button;
            				if (  (_hx_switch_0==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 540)					boobs = (::flixel::FlxG_obj::mouse->_middleButton->current == 2);
HXDLIN( 540)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 542)					boobs = (::flixel::FlxG_obj::mouse->_rightButton->current == 2);
HXDLIN( 542)					goto _hx_goto_6;
            				}
            				_hx_goto_6:;
HXLINE( 546)				return boobs;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 536)			 cpp::Reference<lua_State> l22 = this->lua;
HXDLIN( 536)			::llua::Lua_helper_obj::callbacks->set(HX_("mouseClicked",02,c7,d1,db), ::Dynamic(new _hx_Closure_31()));
HXDLIN( 536)			linc::callbacks::add_callback_function(l22,HX_("mouseClicked",02,c7,d1,db));
            		}
HXLINE( 548)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_32) HXARGC(1)
            			bool _hx_run(::String button){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_548_new)
HXLINE( 549)				 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 549)				bool boobs;
HXDLIN( 549)				if ((_this->current != 1)) {
HXLINE( 549)					boobs = (_this->current == 2);
            				}
            				else {
HXLINE( 549)					boobs = true;
            				}
HXLINE( 550)				::String _hx_switch_1 = button;
            				if (  (_hx_switch_1==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 552)					 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_middleButton;
HXDLIN( 552)					if ((_this->current != 1)) {
HXLINE( 552)						boobs = (_this->current == 2);
            					}
            					else {
HXLINE( 552)						boobs = true;
            					}
HXDLIN( 552)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==HX_("right",dc,0b,64,e9)) ){
HXLINE( 554)					 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN( 554)					if ((_this->current != 1)) {
HXLINE( 554)						boobs = (_this->current == 2);
            					}
            					else {
HXLINE( 554)						boobs = true;
            					}
HXDLIN( 554)					goto _hx_goto_7;
            				}
            				_hx_goto_7:;
HXLINE( 556)				return boobs;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 548)			 cpp::Reference<lua_State> l23 = this->lua;
HXDLIN( 548)			::llua::Lua_helper_obj::callbacks->set(HX_("mousePressed",fd,22,8c,1b), ::Dynamic(new _hx_Closure_32()));
HXDLIN( 548)			linc::callbacks::add_callback_function(l23,HX_("mousePressed",fd,22,8c,1b));
            		}
HXLINE( 558)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_33) HXARGC(1)
            			bool _hx_run(::String button){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_558_new)
HXLINE( 559)				bool boobs = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
HXLINE( 560)				::String _hx_switch_2 = button;
            				if (  (_hx_switch_2==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 562)					boobs = (::flixel::FlxG_obj::mouse->_middleButton->current == -1);
HXDLIN( 562)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE( 564)					boobs = (::flixel::FlxG_obj::mouse->_rightButton->current == -1);
HXDLIN( 564)					goto _hx_goto_8;
            				}
            				_hx_goto_8:;
HXLINE( 566)				return boobs;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 558)			 cpp::Reference<lua_State> l24 = this->lua;
HXDLIN( 558)			::llua::Lua_helper_obj::callbacks->set(HX_("mouseReleased",02,88,e8,05), ::Dynamic(new _hx_Closure_33()));
HXDLIN( 558)			linc::callbacks::add_callback_function(l24,HX_("mouseReleased",02,88,e8,05));
            		}
HXLINE( 568)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_35, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_568_new)
HXLINE( 569)				_gthis->cancelTween(tag);
HXLINE( 570)				if ((note < 0)) {
HXLINE( 570)					note = 0;
            				}
HXLINE( 571)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE( 573)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_575_new)
HXLINE( 576)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 577)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 574)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 574)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_34(tag)))));
HXDLIN( 574)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 568)			 cpp::Reference<lua_State> l25 = this->lua;
HXDLIN( 568)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAngle",fa,a3,45,58), ::Dynamic(new _hx_Closure_35(_gthis)));
HXDLIN( 568)			linc::callbacks::add_callback_function(l25,HX_("noteTweenAngle",fa,a3,45,58));
            		}
HXLINE( 582)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_37, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_582_new)
HXLINE( 583)				_gthis->cancelTween(tag);
HXLINE( 584)				if ((note < 0)) {
HXLINE( 584)					note = 0;
            				}
HXLINE( 585)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE( 587)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_589_new)
HXLINE( 590)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 591)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 588)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN( 588)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_36(tag)))));
HXDLIN( 588)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 582)			 cpp::Reference<lua_State> l26 = this->lua;
HXDLIN( 582)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAlpha",85,07,fa,56), ::Dynamic(new _hx_Closure_37(_gthis)));
HXDLIN( 582)			linc::callbacks::add_callback_function(l26,HX_("noteTweenAlpha",85,07,fa,56));
            		}
HXLINE( 597)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_598_new)
HXLINE( 598)				_gthis->cancelTween(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 597)			 cpp::Reference<lua_State> l27 = this->lua;
HXDLIN( 597)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTween",91,12,99,b7), ::Dynamic(new _hx_Closure_38(_gthis)));
HXDLIN( 597)			linc::callbacks::add_callback_function(l27,HX_("cancelTween",91,12,99,b7));
            		}
HXLINE( 601)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_40, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag, ::Dynamic __o_time, ::Dynamic __o_loops){
            		Float time = __o_time.Default(1);
            		int loops = __o_loops.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_601_new)
HXLINE( 602)				_gthis->cancelTimer(tag);
HXLINE( 603)				{
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_603_new)
HXLINE( 604)						if (tmr->finished) {
HXLINE( 605)							::PlayState_obj::instance->modchartTimers->remove(tag);
            						}
HXLINE( 607)						::PlayState_obj::instance->callOnLuas(HX_("onTimerCompleted",85,2e,4a,47),::cpp::VirtualArray_obj::__new(3)->init(0,tag)->init(1,tmr->loops)->init(2,(tmr->loops - tmr->_loopsCounter)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 603)					::Dynamic this1 = ::PlayState_obj::instance->modchartTimers;
HXDLIN( 603)					 ::flixel::util::FlxTimer value =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(time, ::Dynamic(new _hx_Closure_39(tag)),loops);
HXDLIN( 603)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 601)			 cpp::Reference<lua_State> l28 = this->lua;
HXDLIN( 601)			::llua::Lua_helper_obj::callbacks->set(HX_("runTimer",7a,f8,6a,18), ::Dynamic(new _hx_Closure_40(_gthis)));
HXDLIN( 601)			linc::callbacks::add_callback_function(l28,HX_("runTimer",7a,f8,6a,18));
            		}
HXLINE( 611)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_41, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_612_new)
HXLINE( 612)				_gthis->cancelTimer(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 611)			 cpp::Reference<lua_State> l29 = this->lua;
HXDLIN( 611)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTimer",eb,27,5e,ae), ::Dynamic(new _hx_Closure_41(_gthis)));
HXDLIN( 611)			linc::callbacks::add_callback_function(l29,HX_("cancelTimer",eb,27,5e,ae));
            		}
HXLINE( 648)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_42) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_648_new)
HXLINE( 649)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN( 649)				_hx_tmp->songScore = (_hx_tmp->songScore + value);
HXLINE( 650)				::PlayState_obj::instance->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 648)			 cpp::Reference<lua_State> l30 = this->lua;
HXDLIN( 648)			::llua::Lua_helper_obj::callbacks->set(HX_("addScore",71,99,36,f2), ::Dynamic(new _hx_Closure_42()));
HXDLIN( 648)			linc::callbacks::add_callback_function(l30,HX_("addScore",71,99,36,f2));
            		}
HXLINE( 652)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_43) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_652_new)
HXLINE( 653)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN( 653)				_hx_tmp->songMisses = (_hx_tmp->songMisses + value);
HXLINE( 654)				::PlayState_obj::instance->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 652)			 cpp::Reference<lua_State> l31 = this->lua;
HXDLIN( 652)			::llua::Lua_helper_obj::callbacks->set(HX_("addMisses",6b,97,78,0e), ::Dynamic(new _hx_Closure_43()));
HXDLIN( 652)			linc::callbacks::add_callback_function(l31,HX_("addMisses",6b,97,78,0e));
            		}
HXLINE( 656)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_44) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_656_new)
HXLINE( 657)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN( 657)				_hx_tmp->songHits = (_hx_tmp->songHits + value);
HXLINE( 658)				::PlayState_obj::instance->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 656)			 cpp::Reference<lua_State> l32 = this->lua;
HXDLIN( 656)			::llua::Lua_helper_obj::callbacks->set(HX_("addHits",81,85,4b,81), ::Dynamic(new _hx_Closure_44()));
HXDLIN( 656)			linc::callbacks::add_callback_function(l32,HX_("addHits",81,85,4b,81));
            		}
HXLINE( 660)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_45) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_660_new)
HXLINE( 661)				::PlayState_obj::instance->songScore = value;
HXLINE( 662)				::PlayState_obj::instance->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 660)			 cpp::Reference<lua_State> l33 = this->lua;
HXDLIN( 660)			::llua::Lua_helper_obj::callbacks->set(HX_("setScore",50,dc,0d,87), ::Dynamic(new _hx_Closure_45()));
HXDLIN( 660)			linc::callbacks::add_callback_function(l33,HX_("setScore",50,dc,0d,87));
            		}
HXLINE( 664)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_46) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_664_new)
HXLINE( 665)				::PlayState_obj::instance->songMisses = value;
HXLINE( 666)				::PlayState_obj::instance->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 664)			 cpp::Reference<lua_State> l34 = this->lua;
HXDLIN( 664)			::llua::Lua_helper_obj::callbacks->set(HX_("setMisses",ac,d7,fb,b5), ::Dynamic(new _hx_Closure_46()));
HXDLIN( 664)			linc::callbacks::add_callback_function(l34,HX_("setMisses",ac,d7,fb,b5));
            		}
HXLINE( 668)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_47) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_668_new)
HXLINE( 669)				::PlayState_obj::instance->songHits = value;
HXLINE( 670)				::PlayState_obj::instance->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 668)			 cpp::Reference<lua_State> l35 = this->lua;
HXDLIN( 668)			::llua::Lua_helper_obj::callbacks->set(HX_("setHits",82,83,92,0a), ::Dynamic(new _hx_Closure_47()));
HXDLIN( 668)			linc::callbacks::add_callback_function(l35,HX_("setHits",82,83,92,0a));
            		}
HXLINE( 673)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_48) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		Float value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_674_new)
HXLINE( 674)				::PlayState_obj::instance->health = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 673)			 cpp::Reference<lua_State> l36 = this->lua;
HXDLIN( 673)			::llua::Lua_helper_obj::callbacks->set(HX_("setHealth",de,9d,ad,5c), ::Dynamic(new _hx_Closure_48()));
HXDLIN( 673)			linc::callbacks::add_callback_function(l36,HX_("setHealth",de,9d,ad,5c));
            		}
HXLINE( 676)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_49) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		Float value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_677_new)
HXLINE( 677)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN( 677)				_hx_tmp->health = (_hx_tmp->health + value);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 676)			 cpp::Reference<lua_State> l37 = this->lua;
HXDLIN( 676)			::llua::Lua_helper_obj::callbacks->set(HX_("addHealth",9d,5d,2a,b5), ::Dynamic(new _hx_Closure_49()));
HXDLIN( 676)			linc::callbacks::add_callback_function(l37,HX_("addHealth",9d,5d,2a,b5));
            		}
HXLINE( 679)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_50) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_680_new)
HXLINE( 680)				return ::PlayState_obj::instance->health;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 679)			 cpp::Reference<lua_State> l38 = this->lua;
HXDLIN( 679)			::llua::Lua_helper_obj::callbacks->set(HX_("getHealth",d2,b1,5c,79), ::Dynamic(new _hx_Closure_50()));
HXDLIN( 679)			linc::callbacks::add_callback_function(l38,HX_("getHealth",d2,b1,5c,79));
            		}
HXLINE( 683)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_51) HXARGC(1)
            			 ::Dynamic _hx_run(::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_683_new)
HXLINE( 684)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE( 684)					color = (HX_("0xff",88,a5,15,20) + color);
            				}
HXLINE( 685)				return ::Std_obj::parseInt(color);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 683)			 cpp::Reference<lua_State> l39 = this->lua;
HXDLIN( 683)			::llua::Lua_helper_obj::callbacks->set(HX_("getColorFromHex",24,62,3b,a4), ::Dynamic(new _hx_Closure_51()));
HXDLIN( 683)			linc::callbacks::add_callback_function(l39,HX_("getColorFromHex",24,62,3b,a4));
            		}
HXLINE( 687)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_52) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_687_new)
HXLINE( 688)				bool key = false;
HXLINE( 689)				::String _hx_switch_3 = name;
            				if (  (_hx_switch_3==HX_("accept",08,93,06,0b)) ){
HXLINE( 694)					key = ::PlayState_obj::instance->getControl(HX_("ACCEPT",08,3f,89,bd));
HXDLIN( 694)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("back",27,da,10,41)) ){
HXLINE( 695)					key = ::PlayState_obj::instance->getControl(HX_("BACK",27,a2,d1,2b));
HXDLIN( 695)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("down",62,f8,6d,42)) ){
HXLINE( 691)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_DOWN_P",e0,63,af,91));
HXDLIN( 691)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("left",07,08,b0,47)) ){
HXLINE( 690)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_LEFT_P",c5,66,50,f7));
HXDLIN( 690)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("pause",f6,d6,57,bd)) ){
HXLINE( 696)					key = ::PlayState_obj::instance->getControl(HX_("PAUSE",d6,0e,46,3b));
HXDLIN( 696)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("reset",cf,49,c8,e6)) ){
HXLINE( 697)					key = ::PlayState_obj::instance->getControl(HX_("RESET",af,81,b6,64));
HXDLIN( 697)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE( 693)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_RIGHT_P",40,79,67,8d));
HXDLIN( 693)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("space",c6,8c,66,81)) ){
HXLINE( 698)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 698)					key = _this->keyManager->checkStatus(32,_this->status);
HXDLIN( 698)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_3==HX_("up",5b,66,00,00)) ){
HXLINE( 692)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_UP_P",d9,58,47,13));
HXDLIN( 692)					goto _hx_goto_9;
            				}
            				_hx_goto_9:;
HXLINE( 700)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 687)			 cpp::Reference<lua_State> l40 = this->lua;
HXDLIN( 687)			::llua::Lua_helper_obj::callbacks->set(HX_("keyJustPressed",77,d2,b7,cd), ::Dynamic(new _hx_Closure_52()));
HXDLIN( 687)			linc::callbacks::add_callback_function(l40,HX_("keyJustPressed",77,d2,b7,cd));
            		}
HXLINE( 702)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_53) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_702_new)
HXLINE( 703)				bool key = false;
HXLINE( 704)				::String _hx_switch_4 = name;
            				if (  (_hx_switch_4==HX_("down",62,f8,6d,42)) ){
HXLINE( 706)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_DOWN",0f,ef,09,08));
HXDLIN( 706)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_4==HX_("left",07,08,b0,47)) ){
HXLINE( 705)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_LEFT",b4,fe,4b,0d));
HXDLIN( 705)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_4==HX_("right",dc,0b,64,e9)) ){
HXLINE( 708)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_RIGHT",6f,ec,3f,0c));
HXDLIN( 708)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_4==HX_("space",c6,8c,66,81)) ){
HXLINE( 709)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 709)					key = _this->keyManager->checkStatus(32,_this->status);
HXDLIN( 709)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_4==HX_("up",5b,66,00,00)) ){
HXLINE( 707)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_UP",c8,83,48,cd));
HXDLIN( 707)					goto _hx_goto_10;
            				}
            				_hx_goto_10:;
HXLINE( 711)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 702)			 cpp::Reference<lua_State> l41 = this->lua;
HXDLIN( 702)			::llua::Lua_helper_obj::callbacks->set(HX_("keyPressed",c3,72,6e,a8), ::Dynamic(new _hx_Closure_53()));
HXDLIN( 702)			linc::callbacks::add_callback_function(l41,HX_("keyPressed",c3,72,6e,a8));
            		}
HXLINE( 713)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_54) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_713_new)
HXLINE( 714)				bool key = false;
HXLINE( 715)				::String _hx_switch_5 = name;
            				if (  (_hx_switch_5==HX_("down",62,f8,6d,42)) ){
HXLINE( 717)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_DOWN_R",e2,63,af,91));
HXDLIN( 717)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_5==HX_("left",07,08,b0,47)) ){
HXLINE( 716)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_LEFT_R",c7,66,50,f7));
HXDLIN( 716)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_5==HX_("right",dc,0b,64,e9)) ){
HXLINE( 719)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_RIGHT_R",42,79,67,8d));
HXDLIN( 719)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_5==HX_("space",c6,8c,66,81)) ){
HXLINE( 720)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN( 720)					key = _this->keyManager->checkStatus(32,_this->status);
HXDLIN( 720)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_5==HX_("up",5b,66,00,00)) ){
HXLINE( 718)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_UP_R",db,58,47,13));
HXDLIN( 718)					goto _hx_goto_11;
            				}
            				_hx_goto_11:;
HXLINE( 722)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 713)			 cpp::Reference<lua_State> l42 = this->lua;
HXDLIN( 713)			::llua::Lua_helper_obj::callbacks->set(HX_("keyReleased",7c,05,0c,bf), ::Dynamic(new _hx_Closure_54()));
HXDLIN( 713)			linc::callbacks::add_callback_function(l42,HX_("keyReleased",7c,05,0c,bf));
            		}
HXLINE( 724)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_55) HXARGC(2)
            			void _hx_run(::String name,::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_724_new)
HXLINE( 725)				int charType = 0;
HXLINE( 726)				::String _hx_switch_6 = type.toLowerCase();
            				if (  (_hx_switch_6==HX_("dad",47,36,4c,00)) ){
HXLINE( 727)					charType = 1;
HXDLIN( 727)					goto _hx_goto_12;
            				}
            				if (  (_hx_switch_6==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_6==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 728)					charType = 2;
HXDLIN( 728)					goto _hx_goto_12;
            				}
            				_hx_goto_12:;
HXLINE( 730)				::PlayState_obj::instance->addCharacterToList(name,charType);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 724)			 cpp::Reference<lua_State> l43 = this->lua;
HXDLIN( 724)			::llua::Lua_helper_obj::callbacks->set(HX_("addCharacterToList",e1,1e,4c,45), ::Dynamic(new _hx_Closure_55()));
HXDLIN( 724)			linc::callbacks::add_callback_function(l43,HX_("addCharacterToList",e1,1e,4c,45));
            		}
HXLINE( 732)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_56) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_733_new)
HXLINE( 733)				::Paths_obj::returnGraphic(name,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 732)			 cpp::Reference<lua_State> l44 = this->lua;
HXDLIN( 732)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheImage",9c,8f,57,a3), ::Dynamic(new _hx_Closure_56()));
HXDLIN( 732)			linc::callbacks::add_callback_function(l44,HX_("precacheImage",9c,8f,57,a3));
            		}
HXLINE( 735)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_57) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_736_new)
HXLINE( 736)				::CoolUtil_obj::precacheSound(name,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 735)			 cpp::Reference<lua_State> l45 = this->lua;
HXDLIN( 735)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheSound",10,fd,ba,66), ::Dynamic(new _hx_Closure_57()));
HXDLIN( 735)			linc::callbacks::add_callback_function(l45,HX_("precacheSound",10,fd,ba,66));
            		}
HXLINE( 738)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_58) HXARGC(3)
            			void _hx_run(::String name, ::Dynamic arg1, ::Dynamic arg2){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_738_new)
HXLINE( 739)				::String value1 = ( (::String)(arg1) );
HXLINE( 740)				::String value2 = ( (::String)(arg2) );
HXLINE( 741)				::PlayState_obj::instance->triggerEventNote(name,value1,value2);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 738)			 cpp::Reference<lua_State> l46 = this->lua;
HXDLIN( 738)			::llua::Lua_helper_obj::callbacks->set(HX_("triggerEvent",c2,f7,5a,f4), ::Dynamic(new _hx_Closure_58()));
HXDLIN( 738)			linc::callbacks::add_callback_function(l46,HX_("triggerEvent",c2,f7,5a,f4));
            		}
HXLINE( 745)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_59) HXARGC(1)
            			void _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_746_new)
HXLINE( 746)				::PlayState_obj::instance->startCountdown();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 745)			 cpp::Reference<lua_State> l47 = this->lua;
HXDLIN( 745)			::llua::Lua_helper_obj::callbacks->set(HX_("startCountdown",ef,1f,f0,88), ::Dynamic(new _hx_Closure_59()));
HXDLIN( 745)			linc::callbacks::add_callback_function(l47,HX_("startCountdown",ef,1f,f0,88));
            		}
HXLINE( 748)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_60) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_748_new)
HXLINE( 749)				::PlayState_obj::instance->KillNotes();
HXLINE( 750)				::PlayState_obj::instance->endSong();
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 748)			 cpp::Reference<lua_State> l48 = this->lua;
HXDLIN( 748)			::llua::Lua_helper_obj::callbacks->set(HX_("endSong",50,dd,7c,2e), ::Dynamic(new _hx_Closure_60()));
HXDLIN( 748)			linc::callbacks::add_callback_function(l48,HX_("endSong",50,dd,7c,2e));
            		}
HXLINE( 752)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_61) HXARGC(1)
            			void _hx_run(bool skipTransition){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_752_new)
HXLINE( 753)				::PlayState_obj::instance->persistentUpdate = false;
HXLINE( 754)				::PauseSubState_obj::restartSong(skipTransition);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 752)			 cpp::Reference<lua_State> l49 = this->lua;
HXDLIN( 752)			::llua::Lua_helper_obj::callbacks->set(HX_("restartSong",44,ab,b8,45), ::Dynamic(new _hx_Closure_61()));
HXDLIN( 752)			linc::callbacks::add_callback_function(l49,HX_("restartSong",44,ab,b8,45));
            		}
HXLINE( 756)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_62) HXARGC(1)
            			void _hx_run(bool skipTransition){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_756_new)
HXLINE( 757)				if (skipTransition) {
HXLINE( 759)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE( 760)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
            				}
HXLINE( 763)				::PlayState_obj::cancelMusicFadeTween();
HXLINE( 764)				::CustomFadeTransition_obj::nextCamera = ::PlayState_obj::instance->camOther;
HXLINE( 765)				if (::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn) {
HXLINE( 766)					::CustomFadeTransition_obj::nextCamera = null();
            				}
HXLINE( 768)				if (::PlayState_obj::isStoryMode) {
HXLINE( 769)					::MusicBeatState_obj::switchState( ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
            				}
            				else {
HXLINE( 771)					::MusicBeatState_obj::switchState( ::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
            				}
HXLINE( 773)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 773)				::String library = null();
HXDLIN( 773)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN( 773)				_hx_tmp->playMusic(file,null(),null(),null());
HXLINE( 774)				::PlayState_obj::changedDifficulty = false;
HXLINE( 775)				::PlayState_obj::chartingMode = false;
HXLINE( 776)				::PlayState_obj::instance->transitioning = true;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 756)			 cpp::Reference<lua_State> l50 = this->lua;
HXDLIN( 756)			::llua::Lua_helper_obj::callbacks->set(HX_("exitSong",13,2e,1c,0c), ::Dynamic(new _hx_Closure_62()));
HXDLIN( 756)			linc::callbacks::add_callback_function(l50,HX_("exitSong",13,2e,1c,0c));
            		}
HXLINE( 778)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_63) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_779_new)
HXLINE( 779)				return ::Conductor_obj::songPosition;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 778)			 cpp::Reference<lua_State> l51 = this->lua;
HXDLIN( 778)			::llua::Lua_helper_obj::callbacks->set(HX_("getSongPosition",54,33,26,b0), ::Dynamic(new _hx_Closure_63()));
HXDLIN( 778)			linc::callbacks::add_callback_function(l51,HX_("getSongPosition",54,33,26,b0));
            		}
HXLINE( 782)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_64) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_783_new)
HXLINE( 783)				::String _hx_switch_7 = type.toLowerCase();
            				if (  (_hx_switch_7==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_7==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 787)					return ::PlayState_obj::instance->gfGroup->x;
HXDLIN( 787)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_7==HX_("dad",47,36,4c,00)) ||  (_hx_switch_7==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 785)					return ::PlayState_obj::instance->dadGroup->x;
HXDLIN( 785)					goto _hx_goto_13;
            				}
            				/* default */{
HXLINE( 789)					return ::PlayState_obj::instance->boyfriendGroup->x;
            				}
            				_hx_goto_13:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 782)			 cpp::Reference<lua_State> l52 = this->lua;
HXDLIN( 782)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterX",c5,b4,40,b2), ::Dynamic(new _hx_Closure_64()));
HXDLIN( 782)			linc::callbacks::add_callback_function(l52,HX_("getCharacterX",c5,b4,40,b2));
            		}
HXLINE( 792)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_65) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_793_new)
HXLINE( 793)				::String _hx_switch_8 = type.toLowerCase();
            				if (  (_hx_switch_8==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_8==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 797)					::PlayState_obj::instance->gfGroup->set_x(value);
HXDLIN( 797)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_8==HX_("dad",47,36,4c,00)) ||  (_hx_switch_8==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 795)					::PlayState_obj::instance->dadGroup->set_x(value);
HXDLIN( 795)					goto _hx_goto_14;
            				}
            				/* default */{
HXLINE( 799)					::PlayState_obj::instance->boyfriendGroup->set_x(value);
            				}
            				_hx_goto_14:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 792)			 cpp::Reference<lua_State> l53 = this->lua;
HXDLIN( 792)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterX",d1,96,46,f7), ::Dynamic(new _hx_Closure_65()));
HXDLIN( 792)			linc::callbacks::add_callback_function(l53,HX_("setCharacterX",d1,96,46,f7));
            		}
HXLINE( 802)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_66) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_803_new)
HXLINE( 803)				::String _hx_switch_9 = type.toLowerCase();
            				if (  (_hx_switch_9==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_9==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 807)					return ::PlayState_obj::instance->gfGroup->y;
HXDLIN( 807)					goto _hx_goto_15;
            				}
            				if (  (_hx_switch_9==HX_("dad",47,36,4c,00)) ||  (_hx_switch_9==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 805)					return ::PlayState_obj::instance->dadGroup->y;
HXDLIN( 805)					goto _hx_goto_15;
            				}
            				/* default */{
HXLINE( 809)					return ::PlayState_obj::instance->boyfriendGroup->y;
            				}
            				_hx_goto_15:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 802)			 cpp::Reference<lua_State> l54 = this->lua;
HXDLIN( 802)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterY",c6,b4,40,b2), ::Dynamic(new _hx_Closure_66()));
HXDLIN( 802)			linc::callbacks::add_callback_function(l54,HX_("getCharacterY",c6,b4,40,b2));
            		}
HXLINE( 812)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_67) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_813_new)
HXLINE( 813)				::String _hx_switch_10 = type.toLowerCase();
            				if (  (_hx_switch_10==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_10==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 817)					::PlayState_obj::instance->gfGroup->set_y(value);
HXDLIN( 817)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_10==HX_("dad",47,36,4c,00)) ||  (_hx_switch_10==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 815)					::PlayState_obj::instance->dadGroup->set_y(value);
HXDLIN( 815)					goto _hx_goto_16;
            				}
            				/* default */{
HXLINE( 819)					::PlayState_obj::instance->boyfriendGroup->set_y(value);
            				}
            				_hx_goto_16:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 812)			 cpp::Reference<lua_State> l55 = this->lua;
HXDLIN( 812)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterY",d2,96,46,f7), ::Dynamic(new _hx_Closure_67()));
HXDLIN( 812)			linc::callbacks::add_callback_function(l55,HX_("setCharacterY",d2,96,46,f7));
            		}
HXLINE( 822)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_68) HXARGC(1)
            			void _hx_run(::String target){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_822_new)
HXLINE( 823)				bool isDad = false;
HXLINE( 824)				if ((target == HX_("dad",47,36,4c,00))) {
HXLINE( 825)					isDad = true;
            				}
HXLINE( 827)				::PlayState_obj::instance->moveCamera(isDad);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 822)			 cpp::Reference<lua_State> l56 = this->lua;
HXDLIN( 822)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraSetTarget",2e,85,21,cc), ::Dynamic(new _hx_Closure_68()));
HXDLIN( 822)			linc::callbacks::add_callback_function(l56,HX_("cameraSetTarget",2e,85,21,cc));
            		}
HXLINE( 829)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_69, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String camera,Float intensity,Float duration){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_830_new)
HXLINE( 830)				_gthis->cameraFromString(camera)->shake(intensity,duration,null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 829)			 cpp::Reference<lua_State> l57 = this->lua;
HXDLIN( 829)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraShake",e1,d1,62,70), ::Dynamic(new _hx_Closure_69(_gthis)));
HXDLIN( 829)			linc::callbacks::add_callback_function(l57,HX_("cameraShake",e1,d1,62,70));
            		}
HXLINE( 833)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_70, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String camera,::String color,Float duration,bool forced){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_833_new)
HXLINE( 834)				int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE( 835)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE( 835)					colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            				}
HXLINE( 836)				_gthis->cameraFromString(camera)->flash(colorNum,duration,null(),forced);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 833)			 cpp::Reference<lua_State> l58 = this->lua;
HXDLIN( 833)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraFlash",cb,28,d2,f6), ::Dynamic(new _hx_Closure_70(_gthis)));
HXDLIN( 833)			linc::callbacks::add_callback_function(l58,HX_("cameraFlash",cb,28,d2,f6));
            		}
HXLINE( 838)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_71, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String camera,::String color,Float duration,bool forced){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_838_new)
HXLINE( 839)				int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE( 840)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE( 840)					colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            				}
HXLINE( 841)				_gthis->cameraFromString(camera)->fade(colorNum,duration,false,null(),forced);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 838)			 cpp::Reference<lua_State> l59 = this->lua;
HXDLIN( 838)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraFade",c1,de,d3,a9), ::Dynamic(new _hx_Closure_71(_gthis)));
HXDLIN( 838)			linc::callbacks::add_callback_function(l59,HX_("cameraFade",c1,de,d3,a9));
            		}
HXLINE( 843)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_72) HXARGC(1)
            			void _hx_run(Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_844_new)
HXLINE( 844)				::PlayState_obj::instance->ratingPercent = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 843)			 cpp::Reference<lua_State> l60 = this->lua;
HXDLIN( 843)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingPercent",26,a3,29,ea), ::Dynamic(new _hx_Closure_72()));
HXDLIN( 843)			linc::callbacks::add_callback_function(l60,HX_("setRatingPercent",26,a3,29,ea));
            		}
HXLINE( 846)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_73) HXARGC(1)
            			void _hx_run(::String value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_847_new)
HXLINE( 847)				::PlayState_obj::instance->ratingName = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 846)			 cpp::Reference<lua_State> l61 = this->lua;
HXDLIN( 846)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingName",4a,e3,a3,a6), ::Dynamic(new _hx_Closure_73()));
HXDLIN( 846)			linc::callbacks::add_callback_function(l61,HX_("setRatingName",4a,e3,a3,a6));
            		}
HXLINE( 849)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_74) HXARGC(1)
            			void _hx_run(::String value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_850_new)
HXLINE( 850)				::PlayState_obj::instance->ratingFC = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 849)			 cpp::Reference<lua_State> l62 = this->lua;
HXDLIN( 849)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingFC",5c,3c,f6,89), ::Dynamic(new _hx_Closure_74()));
HXDLIN( 849)			linc::callbacks::add_callback_function(l62,HX_("setRatingFC",5c,3c,f6,89));
            		}
HXLINE( 852)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_75, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_852_new)
HXLINE( 853)				 ::flixel::FlxCamera cam = _gthis->cameraFromString(camera);
HXLINE( 854)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->x;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 852)			 cpp::Reference<lua_State> l63 = this->lua;
HXDLIN( 852)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseX",c9,d3,64,48), ::Dynamic(new _hx_Closure_75(_gthis)));
HXDLIN( 852)			linc::callbacks::add_callback_function(l63,HX_("getMouseX",c9,d3,64,48));
            		}
HXLINE( 856)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_76, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_856_new)
HXLINE( 857)				 ::flixel::FlxCamera cam = _gthis->cameraFromString(camera);
HXLINE( 858)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->y;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 856)			 cpp::Reference<lua_State> l64 = this->lua;
HXDLIN( 856)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseY",ca,d3,64,48), ::Dynamic(new _hx_Closure_76(_gthis)));
HXDLIN( 856)			linc::callbacks::add_callback_function(l64,HX_("getMouseY",ca,d3,64,48));
            		}
HXLINE( 860)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_77) HXARGC(3)
            			void _hx_run(::String character,::String anim, ::Dynamic __o_forced){
            		 ::Dynamic forced = __o_forced;
            		if (::hx::IsNull(__o_forced)) forced = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_861_new)
HXLINE( 861)				::String _hx_switch_11 = character.toLowerCase();
            				if (  (_hx_switch_11==HX_("dad",47,36,4c,00)) ){
HXLINE( 863)					if (::PlayState_obj::instance->dad->animOffsets->exists(anim)) {
HXLINE( 864)						::PlayState_obj::instance->dad->playAnim(anim,forced,null(),null());
            					}
HXLINE( 863)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_11==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_11==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 866)					if (::PlayState_obj::instance->gf->animOffsets->exists(anim)) {
HXLINE( 867)						::PlayState_obj::instance->gf->playAnim(anim,forced,null(),null());
            					}
HXLINE( 866)					goto _hx_goto_17;
            				}
            				/* default */{
HXLINE( 869)					if (::PlayState_obj::instance->boyfriend->animOffsets->exists(anim)) {
HXLINE( 870)						::PlayState_obj::instance->boyfriend->playAnim(anim,forced,null(),null());
            					}
            				}
            				_hx_goto_17:;
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 860)			 cpp::Reference<lua_State> l65 = this->lua;
HXDLIN( 860)			::llua::Lua_helper_obj::callbacks->set(HX_("characterPlayAnim",ee,d2,39,cb), ::Dynamic(new _hx_Closure_77()));
HXDLIN( 860)			linc::callbacks::add_callback_function(l65,HX_("characterPlayAnim",ee,d2,39,cb));
            		}
HXLINE( 873)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_78) HXARGC(1)
            			void _hx_run(::String character){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_874_new)
HXLINE( 874)				::String _hx_switch_12 = character.toLowerCase();
            				if (  (_hx_switch_12==HX_("dad",47,36,4c,00)) ){
HXLINE( 875)					::PlayState_obj::instance->dad->dance();
HXDLIN( 875)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_12==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_12==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 876)					::PlayState_obj::instance->gf->dance();
HXDLIN( 876)					goto _hx_goto_18;
            				}
            				/* default */{
HXLINE( 877)					::PlayState_obj::instance->boyfriend->dance();
            				}
            				_hx_goto_18:;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 873)			 cpp::Reference<lua_State> l66 = this->lua;
HXDLIN( 873)			::llua::Lua_helper_obj::callbacks->set(HX_("characterDance",ca,32,95,aa), ::Dynamic(new _hx_Closure_78()));
HXDLIN( 873)			linc::callbacks::add_callback_function(l66,HX_("characterDance",ca,32,95,aa));
            		}
HXLINE( 881)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_79, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,::String image,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_881_new)
HXLINE( 882)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE( 883)				_gthis->resetSpriteTag(tag);
HXLINE( 884)				 ::ModchartSprite leSprite =  ::ModchartSprite_obj::__alloc( HX_CTX ,x,y,null());
HXLINE( 885)				bool _hx_tmp;
HXDLIN( 885)				if (::hx::IsNotNull( image )) {
HXLINE( 885)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE( 885)					_hx_tmp = false;
            				}
HXDLIN( 885)				if (_hx_tmp) {
HXLINE( 886)					::String library = null();
HXDLIN( 886)					 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(image,library);
HXDLIN( 886)					leSprite->loadGraphic(returnAsset,null(),null(),null(),null(),null());
            				}
HXLINE( 888)				leSprite->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 889)				::PlayState_obj::instance->modchartSprites->set(tag,leSprite);
HXLINE( 890)				leSprite->set_active(true);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 881)			 cpp::Reference<lua_State> l67 = this->lua;
HXDLIN( 881)			::llua::Lua_helper_obj::callbacks->set(HX_("makeLuaSprite",0f,bc,5b,d4), ::Dynamic(new _hx_Closure_79(_gthis)));
HXDLIN( 881)			linc::callbacks::add_callback_function(l67,HX_("makeLuaSprite",0f,bc,5b,d4));
            		}
HXLINE( 892)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_80, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String image,Float x,Float y,::String __o_spriteType){
            		::String spriteType = __o_spriteType;
            		if (::hx::IsNull(__o_spriteType)) spriteType = HX_("sparrow",0c,3c,ac,9b);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_892_new)
HXLINE( 893)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE( 894)				_gthis->resetSpriteTag(tag);
HXLINE( 895)				 ::ModchartSprite leSprite =  ::ModchartSprite_obj::__alloc( HX_CTX ,x,y,null());
HXLINE( 897)				::String _hx_switch_13 = spriteType.toLowerCase();
            				if (  (_hx_switch_13==HX_("pac",52,51,55,00)) ||  (_hx_switch_13==HX_("packer",86,57,98,e3)) ||  (_hx_switch_13==HX_("packeratlas",05,f0,7b,dc)) ){
HXLINE( 903)					::String library = null();
HXDLIN( 903)					 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(image,null());
HXDLIN( 903)					bool txtExists = false;
HXDLIN( 903)					if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".txt",02,3f,c0,1e))))) {
HXLINE( 903)						txtExists = true;
            					}
HXDLIN( 903)					 ::Dynamic _hx_tmp;
HXDLIN( 903)					if (::hx::IsNotNull( imageLoaded )) {
HXLINE( 903)						_hx_tmp = imageLoaded;
            					}
            					else {
HXLINE( 903)						 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(image,library);
HXDLIN( 903)						_hx_tmp = returnAsset;
            					}
HXDLIN( 903)					::String _hx_tmp1;
HXDLIN( 903)					if (txtExists) {
HXLINE( 903)						_hx_tmp1 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".txt",02,3f,c0,1e))));
            					}
            					else {
HXLINE( 903)						_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + image) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library);
            					}
HXDLIN( 903)					leSprite->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(_hx_tmp,_hx_tmp1));
HXDLIN( 903)					goto _hx_goto_19;
            				}
            				if (  (_hx_switch_13==HX_("tex",e7,5d,58,00)) ||  (_hx_switch_13==HX_("texture",db,c8,e0,9e)) ||  (_hx_switch_13==HX_("textureatlas",90,8a,4f,8c)) ){
HXLINE( 900)					leSprite->set_frames(::animateatlas::AtlasFrameMaker_obj::construct(image,null()));
HXDLIN( 900)					goto _hx_goto_19;
            				}
            				/* default */{
HXLINE( 906)					::String library = null();
HXDLIN( 906)					 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(image,library);
HXDLIN( 906)					 ::flixel::graphics::FlxGraphic graphic = returnAsset;
HXDLIN( 906)					bool xmlExists = false;
HXDLIN( 906)					if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 906)						xmlExists = true;
            					}
HXDLIN( 906)					::String _hx_tmp;
HXDLIN( 906)					if (xmlExists) {
HXLINE( 906)						_hx_tmp = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e))));
            					}
            					else {
HXLINE( 906)						_hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library);
            					}
HXDLIN( 906)					leSprite->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(graphic,_hx_tmp));
            				}
            				_hx_goto_19:;
HXLINE( 910)				leSprite->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 911)				::PlayState_obj::instance->modchartSprites->set(tag,leSprite);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 892)			 cpp::Reference<lua_State> l68 = this->lua;
HXDLIN( 892)			::llua::Lua_helper_obj::callbacks->set(HX_("makeAnimatedLuaSprite",ec,be,a6,d0), ::Dynamic(new _hx_Closure_80(_gthis)));
HXDLIN( 892)			linc::callbacks::add_callback_function(l68,HX_("makeAnimatedLuaSprite",ec,be,a6,d0));
            		}
HXLINE( 914)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_81) HXARGC(4)
            			void _hx_run(::String obj,int width,int height,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_914_new)
HXLINE( 915)				int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE( 916)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE( 916)					colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            				}
HXLINE( 918)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE( 919)					( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) )->makeGraphic(width,height,colorNum,null(),null());
HXLINE( 920)					return;
            				}
HXLINE( 923)				 ::flixel::FlxState object;
HXDLIN( 923)				if (::PlayState_obj::instance->isDead) {
HXLINE( 923)					object = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 923)					object = ::PlayState_obj::instance;
            				}
HXDLIN( 923)				 ::flixel::FlxSprite object1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(object,obj)) );
HXLINE( 924)				if (::hx::IsNotNull( object1 )) {
HXLINE( 925)					object1->makeGraphic(width,height,colorNum,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 914)			 cpp::Reference<lua_State> l69 = this->lua;
HXDLIN( 914)			::llua::Lua_helper_obj::callbacks->set(HX_("makeGraphic",5a,82,11,b8), ::Dynamic(new _hx_Closure_81()));
HXDLIN( 914)			linc::callbacks::add_callback_function(l69,HX_("makeGraphic",5a,82,11,b8));
            		}
HXLINE( 928)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_82) HXARGC(5)
            			void _hx_run(::String obj,::String name,::String prefix, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		int framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_928_new)
HXLINE( 929)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE( 930)					 ::ModchartSprite cock = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXLINE( 931)					cock->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE( 932)					if (::hx::IsNull( cock->animation->_curAnim )) {
HXLINE( 933)						cock->animation->play(name,true,null(),null());
            					}
HXLINE( 935)					return;
            				}
HXLINE( 938)				 ::flixel::FlxState cock;
HXDLIN( 938)				if (::PlayState_obj::instance->isDead) {
HXLINE( 938)					cock = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 938)					cock = ::PlayState_obj::instance;
            				}
HXDLIN( 938)				 ::flixel::FlxSprite cock1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(cock,obj)) );
HXLINE( 939)				if (::hx::IsNotNull( cock1 )) {
HXLINE( 940)					cock1->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE( 941)					if (::hx::IsNull( cock1->animation->_curAnim )) {
HXLINE( 942)						cock1->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 928)			 cpp::Reference<lua_State> l70 = this->lua;
HXDLIN( 928)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationByPrefix",8c,c6,c0,2b), ::Dynamic(new _hx_Closure_82()));
HXDLIN( 928)			linc::callbacks::add_callback_function(l70,HX_("addAnimationByPrefix",8c,c6,c0,2b));
            		}
HXLINE( 946)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_83) HXARGC(5)
            			void _hx_run(::String obj,::String name,::String prefix,::String indices, ::Dynamic __o_framerate){
            		int framerate = __o_framerate.Default(24);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_946_new)
HXLINE( 947)				::Array< ::String > strIndices = ::StringTools_obj::trim(indices).split(HX_(",",2c,00,00,00));
HXLINE( 948)				::Array< int > die = ::Array_obj< int >::__new(0);
HXLINE( 949)				{
HXLINE( 949)					int _g = 0;
HXDLIN( 949)					int _g1 = strIndices->length;
HXDLIN( 949)					while((_g < _g1)){
HXLINE( 949)						_g = (_g + 1);
HXDLIN( 949)						int i = (_g - 1);
HXLINE( 950)						die->push(::Std_obj::parseInt(strIndices->__get(i)));
            					}
            				}
HXLINE( 953)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE( 954)					 ::ModchartSprite pussy = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXLINE( 955)					pussy->animation->addByIndices(name,prefix,die,HX_("",00,00,00,00),framerate,false,null(),null());
HXLINE( 956)					if (::hx::IsNull( pussy->animation->_curAnim )) {
HXLINE( 957)						pussy->animation->play(name,true,null(),null());
            					}
HXLINE( 959)					return;
            				}
HXLINE( 962)				 ::flixel::FlxState pussy;
HXDLIN( 962)				if (::PlayState_obj::instance->isDead) {
HXLINE( 962)					pussy = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 962)					pussy = ::PlayState_obj::instance;
            				}
HXDLIN( 962)				 ::flixel::FlxSprite pussy1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(pussy,obj)) );
HXLINE( 963)				if (::hx::IsNotNull( pussy1 )) {
HXLINE( 964)					pussy1->animation->addByIndices(name,prefix,die,HX_("",00,00,00,00),framerate,false,null(),null());
HXLINE( 965)					if (::hx::IsNull( pussy1->animation->_curAnim )) {
HXLINE( 966)						pussy1->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 946)			 cpp::Reference<lua_State> l71 = this->lua;
HXDLIN( 946)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationByIndices",ed,b4,f9,ce), ::Dynamic(new _hx_Closure_83()));
HXDLIN( 946)			linc::callbacks::add_callback_function(l71,HX_("addAnimationByIndices",ed,b4,f9,ce));
            		}
HXLINE( 970)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_84) HXARGC(3)
            			void _hx_run(::String obj,::String name, ::Dynamic __o_forced){
            		bool forced = __o_forced.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_970_new)
HXLINE( 971)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE( 972)					( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) )->animation->play(name,forced,null(),null());
HXLINE( 973)					return;
            				}
HXLINE( 976)				 ::flixel::FlxState spr;
HXDLIN( 976)				if (::PlayState_obj::instance->isDead) {
HXLINE( 976)					spr = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 976)					spr = ::PlayState_obj::instance;
            				}
HXDLIN( 976)				 ::flixel::FlxSprite spr1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(spr,obj)) );
HXLINE( 977)				if (::hx::IsNotNull( spr1 )) {
HXLINE( 978)					spr1->animation->play(name,forced,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 970)			 cpp::Reference<lua_State> l72 = this->lua;
HXDLIN( 970)			::llua::Lua_helper_obj::callbacks->set(HX_("objectPlayAnimation",31,88,25,0b), ::Dynamic(new _hx_Closure_84()));
HXDLIN( 970)			linc::callbacks::add_callback_function(l72,HX_("objectPlayAnimation",31,88,25,0b));
            		}
HXLINE( 982)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_85) HXARGC(3)
            			void _hx_run(::String obj,Float scrollX,Float scrollY){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_982_new)
HXLINE( 983)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE( 984)					( ( ::flixel::FlxObject)(::PlayState_obj::instance->modchartSprites->get(obj)) )->scrollFactor->set(scrollX,scrollY);
HXLINE( 985)					return;
            				}
HXLINE( 988)				 ::flixel::FlxState object;
HXDLIN( 988)				if (::PlayState_obj::instance->isDead) {
HXLINE( 988)					object = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE( 988)					object = ::PlayState_obj::instance;
            				}
HXDLIN( 988)				 ::flixel::FlxObject object1 = ( ( ::flixel::FlxObject)(::Reflect_obj::getProperty(object,obj)) );
HXLINE( 989)				if (::hx::IsNotNull( object1 )) {
HXLINE( 990)					object1->scrollFactor->set(scrollX,scrollY);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 982)			 cpp::Reference<lua_State> l73 = this->lua;
HXDLIN( 982)			::llua::Lua_helper_obj::callbacks->set(HX_("setScrollFactor",7e,bf,85,5a), ::Dynamic(new _hx_Closure_85()));
HXDLIN( 982)			linc::callbacks::add_callback_function(l73,HX_("setScrollFactor",7e,bf,85,5a));
            		}
HXLINE( 993)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_86) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_front){
            		bool front = __o_front.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_994_new)
HXLINE( 994)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE( 995)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE( 996)					if (!(shit->wasAdded)) {
HXLINE( 997)						if (front) {
HXLINE( 999)							 ::flixel::FlxState _hx_tmp;
HXDLIN( 999)							if (::PlayState_obj::instance->isDead) {
HXLINE( 999)								_hx_tmp = ::GameOverSubstate_obj::instance;
            							}
            							else {
HXLINE( 999)								_hx_tmp = ::PlayState_obj::instance;
            							}
HXDLIN( 999)							_hx_tmp->add(shit).StaticCast<  ::flixel::FlxBasic >();
            						}
            						else {
HXLINE(1003)							if (::PlayState_obj::instance->isDead) {
HXLINE(1005)								 ::GameOverSubstate _hx_tmp = ::GameOverSubstate_obj::instance;
HXDLIN(1005)								_hx_tmp->insert(::GameOverSubstate_obj::instance->members->indexOf(::GameOverSubstate_obj::instance->boyfriend,null()),shit).StaticCast<  ::flixel::FlxBasic >();
            							}
            							else {
HXLINE(1009)								int position = ::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->gfGroup,null());
HXLINE(1010)								if ((::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->boyfriendGroup,null()) < position)) {
HXLINE(1011)									position = ::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->boyfriendGroup,null());
            								}
            								else {
HXLINE(1012)									if ((::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->dadGroup,null()) < position)) {
HXLINE(1013)										position = ::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->dadGroup,null());
            									}
            								}
HXLINE(1015)								::PlayState_obj::instance->insert(position,shit).StaticCast<  ::flixel::FlxBasic >();
            							}
            						}
HXLINE(1018)						shit->wasAdded = true;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 993)			 cpp::Reference<lua_State> l74 = this->lua;
HXDLIN( 993)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaSprite",7c,e5,06,db), ::Dynamic(new _hx_Closure_86()));
HXDLIN( 993)			linc::callbacks::add_callback_function(l74,HX_("addLuaSprite",7c,e5,06,db));
            		}
HXLINE(1023)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_87, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,int x, ::Dynamic __o_y){
            		int y = __o_y.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1023_new)
HXLINE(1024)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1025)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXLINE(1026)					shit->setGraphicSize(x,y);
HXLINE(1027)					shit->updateHitbox();
HXLINE(1028)					return;
            				}
HXLINE(1031)				 ::flixel::FlxState poop;
HXDLIN(1031)				if (::PlayState_obj::instance->isDead) {
HXLINE(1031)					poop = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1031)					poop = ::PlayState_obj::instance;
            				}
HXDLIN(1031)				 ::flixel::FlxSprite poop1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(poop,obj)) );
HXLINE(1032)				if (::hx::IsNotNull( poop1 )) {
HXLINE(1033)					poop1->setGraphicSize(x,y);
HXLINE(1034)					poop1->updateHitbox();
HXLINE(1035)					return;
            				}
HXLINE(1037)				_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + obj),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1023)			 cpp::Reference<lua_State> l75 = this->lua;
HXDLIN(1023)			::llua::Lua_helper_obj::callbacks->set(HX_("setGraphicSize",07,d7,f8,2d), ::Dynamic(new _hx_Closure_87(_gthis)));
HXDLIN(1023)			linc::callbacks::add_callback_function(l75,HX_("setGraphicSize",07,d7,f8,2d));
            		}
HXLINE(1039)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_88, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1039_new)
HXLINE(1040)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1041)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXLINE(1042)					shit->scale->set(x,y);
HXLINE(1043)					shit->updateHitbox();
HXLINE(1044)					return;
            				}
HXLINE(1047)				 ::flixel::FlxState poop;
HXDLIN(1047)				if (::PlayState_obj::instance->isDead) {
HXLINE(1047)					poop = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1047)					poop = ::PlayState_obj::instance;
            				}
HXDLIN(1047)				 ::flixel::FlxSprite poop1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(poop,obj)) );
HXLINE(1048)				if (::hx::IsNotNull( poop1 )) {
HXLINE(1049)					poop1->scale->set(x,y);
HXLINE(1050)					poop1->updateHitbox();
HXLINE(1051)					return;
            				}
HXLINE(1053)				_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + obj),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1039)			 cpp::Reference<lua_State> l76 = this->lua;
HXDLIN(1039)			::llua::Lua_helper_obj::callbacks->set(HX_("scaleObject",e9,44,43,01), ::Dynamic(new _hx_Closure_88(_gthis)));
HXDLIN(1039)			linc::callbacks::add_callback_function(l76,HX_("scaleObject",e9,44,43,01));
            		}
HXLINE(1055)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_89, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String obj){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1055_new)
HXLINE(1056)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1057)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXLINE(1058)					shit->updateHitbox();
HXLINE(1059)					return;
            				}
HXLINE(1062)				 ::flixel::FlxState poop;
HXDLIN(1062)				if (::PlayState_obj::instance->isDead) {
HXLINE(1062)					poop = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1062)					poop = ::PlayState_obj::instance;
            				}
HXDLIN(1062)				 ::flixel::FlxSprite poop1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(poop,obj)) );
HXLINE(1063)				if (::hx::IsNotNull( poop1 )) {
HXLINE(1064)					poop1->updateHitbox();
HXLINE(1065)					return;
            				}
HXLINE(1067)				_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + obj),null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1055)			 cpp::Reference<lua_State> l77 = this->lua;
HXDLIN(1055)			::llua::Lua_helper_obj::callbacks->set(HX_("updateHitbox",81,94,eb,56), ::Dynamic(new _hx_Closure_89(_gthis)));
HXDLIN(1055)			linc::callbacks::add_callback_function(l77,HX_("updateHitbox",81,94,eb,56));
            		}
HXLINE(1069)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_90) HXARGC(2)
            			void _hx_run(::String group,int index){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1069_new)
HXLINE(1070)				 ::flixel::FlxState _hx_tmp;
HXDLIN(1070)				if (::PlayState_obj::instance->isDead) {
HXLINE(1070)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1070)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN(1070)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_hx_tmp,group),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE(1071)					 ::flixel::FlxState _hx_tmp;
HXDLIN(1071)					if (::PlayState_obj::instance->isDead) {
HXLINE(1071)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1071)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN(1071)					 ::Dynamic(::Reflect_obj::getProperty(_hx_tmp,group)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index)->__Field(HX_("updateHitbox",81,94,eb,56),::hx::paccDynamic)();
HXLINE(1072)					return;
            				}
HXLINE(1074)				 ::flixel::FlxState _hx_tmp1;
HXDLIN(1074)				if (::PlayState_obj::instance->isDead) {
HXLINE(1074)					_hx_tmp1 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1074)					_hx_tmp1 = ::PlayState_obj::instance;
            				}
HXDLIN(1074)				::Reflect_obj::getProperty(_hx_tmp1,group)->__GetItem(index)->__Field(HX_("updateHitbox",81,94,eb,56),::hx::paccDynamic)();
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1069)			 cpp::Reference<lua_State> l78 = this->lua;
HXDLIN(1069)			::llua::Lua_helper_obj::callbacks->set(HX_("updateHitboxFromGroup",b4,d0,d8,d6), ::Dynamic(new _hx_Closure_90()));
HXDLIN(1069)			linc::callbacks::add_callback_function(l78,HX_("updateHitboxFromGroup",b4,d0,d8,d6));
            		}
HXLINE(1076)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_91) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_destroy){
            		bool destroy = __o_destroy.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1076_new)
HXLINE(1077)				if (!(::PlayState_obj::instance->modchartSprites->exists(tag))) {
HXLINE(1078)					return;
            				}
HXLINE(1081)				 ::ModchartSprite pee = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(1082)				if (destroy) {
HXLINE(1083)					pee->kill();
            				}
HXLINE(1086)				if (pee->wasAdded) {
HXLINE(1087)					 ::flixel::FlxState _hx_tmp;
HXDLIN(1087)					if (::PlayState_obj::instance->isDead) {
HXLINE(1087)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1087)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN(1087)					_hx_tmp->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1088)					pee->wasAdded = false;
            				}
HXLINE(1091)				if (destroy) {
HXLINE(1092)					pee->destroy();
HXLINE(1093)					::PlayState_obj::instance->modchartSprites->remove(tag);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1076)			 cpp::Reference<lua_State> l79 = this->lua;
HXDLIN(1076)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaSprite",f9,5e,d1,1c), ::Dynamic(new _hx_Closure_91()));
HXDLIN(1076)			linc::callbacks::add_callback_function(l79,HX_("removeLuaSprite",f9,5e,d1,1c));
            		}
HXLINE(1097)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_92, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String obj,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1097_new)
HXLINE(1098)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1099)					 ::ModchartSprite _hx_tmp = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXDLIN(1099)					_hx_tmp->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE(1100)					return true;
            				}
            				else {
HXLINE(1102)					if (::PlayState_obj::instance->modchartTexts->exists(obj)) {
HXLINE(1103)						 ::ModchartText _hx_tmp = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(obj)) );
HXDLIN(1103)						_hx_tmp->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE(1104)						return true;
            					}
            				}
HXLINE(1107)				 ::flixel::FlxState object;
HXDLIN(1107)				if (::PlayState_obj::instance->isDead) {
HXLINE(1107)					object = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1107)					object = ::PlayState_obj::instance;
            				}
HXDLIN(1107)				 ::flixel::FlxObject object1 = ( ( ::flixel::FlxObject)(::Reflect_obj::getProperty(object,obj)) );
HXLINE(1108)				if (::hx::IsNotNull( object1 )) {
HXLINE(1109)					object1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE(1110)					return true;
            				}
HXLINE(1112)				_gthis->luaTrace(((HX_("Object ",61,90,a0,4f) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE(1113)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1097)			 cpp::Reference<lua_State> l80 = this->lua;
HXDLIN(1097)			::llua::Lua_helper_obj::callbacks->set(HX_("setObjectCamera",86,25,4c,b0), ::Dynamic(new _hx_Closure_92(_gthis)));
HXDLIN(1097)			linc::callbacks::add_callback_function(l80,HX_("setObjectCamera",86,25,4c,b0));
            		}
HXLINE(1115)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_93, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String obj,::String __o_blend){
            		::String blend = __o_blend;
            		if (::hx::IsNull(__o_blend)) blend = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1115_new)
HXLINE(1116)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1117)					 ::ModchartSprite _hx_tmp = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
HXDLIN(1117)					_hx_tmp->set_blend(_gthis->blendModeFromString(blend));
HXLINE(1118)					return true;
            				}
HXLINE(1121)				 ::flixel::FlxState spr;
HXDLIN(1121)				if (::PlayState_obj::instance->isDead) {
HXLINE(1121)					spr = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1121)					spr = ::PlayState_obj::instance;
            				}
HXDLIN(1121)				 ::flixel::FlxSprite spr1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(spr,obj)) );
HXLINE(1122)				if (::hx::IsNotNull( spr1 )) {
HXLINE(1123)					spr1->set_blend(_gthis->blendModeFromString(blend));
HXLINE(1124)					return true;
            				}
HXLINE(1126)				_gthis->luaTrace(((HX_("Object ",61,90,a0,4f) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE(1127)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1115)			 cpp::Reference<lua_State> l81 = this->lua;
HXDLIN(1115)			::llua::Lua_helper_obj::callbacks->set(HX_("setBlendMode",52,a4,87,30), ::Dynamic(new _hx_Closure_93(_gthis)));
HXDLIN(1115)			linc::callbacks::add_callback_function(l81,HX_("setBlendMode",52,a4,87,30));
            		}
HXLINE(1129)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_94, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String obj,::String __o_pos){
            		::String pos = __o_pos;
            		if (::hx::IsNull(__o_pos)) pos = HX_("xy",01,69,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1129_new)
HXLINE(1130)				 ::flixel::FlxSprite spr;
HXLINE(1131)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1132)					spr = ( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
            				}
            				else {
HXLINE(1133)					if (::PlayState_obj::instance->modchartTexts->exists(obj)) {
HXLINE(1134)						spr = ( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartTexts->get(obj)) );
            					}
            					else {
HXLINE(1136)						 ::flixel::FlxState spr1;
HXDLIN(1136)						if (::PlayState_obj::instance->isDead) {
HXLINE(1136)							spr1 = ::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE(1136)							spr1 = ::PlayState_obj::instance;
            						}
HXDLIN(1136)						spr = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(spr1,obj)) );
            					}
            				}
HXLINE(1139)				if (::hx::IsNotNull( spr )) {
HXLINE(1141)					::String _hx_switch_14 = ::StringTools_obj::trim(pos).toLowerCase();
            					if (  (_hx_switch_14==HX_("x",78,00,00,00)) ){
HXLINE(1144)						spr->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1145)						return;
HXLINE(1143)						goto _hx_goto_21;
            					}
            					if (  (_hx_switch_14==HX_("y",79,00,00,00)) ){
HXLINE(1147)						spr->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE(1148)						return;
HXLINE(1146)						goto _hx_goto_21;
            					}
            					/* default */{
HXLINE(1150)						spr->screenCenter(::flixel::util::FlxAxes_obj::XY_dyn());
HXLINE(1151)						return;
            					}
            					_hx_goto_21:;
            				}
HXLINE(1154)				_gthis->luaTrace(((HX_("Object ",61,90,a0,4f) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1129)			 cpp::Reference<lua_State> l82 = this->lua;
HXDLIN(1129)			::llua::Lua_helper_obj::callbacks->set(HX_("screenCenter",61,2e,f9,e2), ::Dynamic(new _hx_Closure_94(_gthis)));
HXDLIN(1129)			linc::callbacks::add_callback_function(l82,HX_("screenCenter",61,2e,f9,e2));
            		}
HXLINE(1156)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_95) HXARGC(2)
            			bool _hx_run(::String obj1,::String obj2){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1156_new)
HXLINE(1157)				::Array< ::String > namesArray = ::Array_obj< ::String >::__new(2)->init(0,obj1)->init(1,obj2);
HXLINE(1158)				::Array< ::Dynamic> objectsArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1159)				{
HXLINE(1159)					int _g = 0;
HXDLIN(1159)					int _g1 = namesArray->length;
HXDLIN(1159)					while((_g < _g1)){
HXLINE(1159)						_g = (_g + 1);
HXDLIN(1159)						int i = (_g - 1);
HXLINE(1161)						if (::PlayState_obj::instance->modchartSprites->exists(namesArray->__get(i))) {
HXLINE(1162)							objectsArray->push(::PlayState_obj::instance->modchartSprites->get(namesArray->__get(i)));
            						}
            						else {
HXLINE(1164)							if (::PlayState_obj::instance->modchartTexts->exists(namesArray->__get(i))) {
HXLINE(1165)								objectsArray->push(::PlayState_obj::instance->modchartTexts->get(namesArray->__get(i)));
            							}
            							else {
HXLINE(1168)								 ::flixel::FlxState _hx_tmp;
HXDLIN(1168)								if (::PlayState_obj::instance->isDead) {
HXLINE(1168)									_hx_tmp = ::GameOverSubstate_obj::instance;
            								}
            								else {
HXLINE(1168)									_hx_tmp = ::PlayState_obj::instance;
            								}
HXDLIN(1168)								objectsArray->push(::Reflect_obj::getProperty(_hx_tmp,namesArray->__get(i)));
            							}
            						}
            					}
            				}
HXLINE(1172)				if (!(objectsArray->contains(null()))) {
HXLINE(1174)					 ::Dynamic NotifyCallback = null();
HXDLIN(1174)					return ::flixel::FlxG_obj::overlap(objectsArray->__get(0).StaticCast<  ::flixel::FlxSprite >(),objectsArray->__get(1).StaticCast<  ::flixel::FlxSprite >(),NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            				}
HXLINE(1176)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1156)			 cpp::Reference<lua_State> l83 = this->lua;
HXDLIN(1156)			::llua::Lua_helper_obj::callbacks->set(HX_("isColliding",f1,2a,d1,af), ::Dynamic(new _hx_Closure_95()));
HXDLIN(1156)			linc::callbacks::add_callback_function(l83,HX_("isColliding",f1,2a,d1,af));
            		}
HXLINE(1178)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_96) HXARGC(3)
            			int _hx_run(::String obj,int x,int y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1178_new)
HXLINE(1179)				 ::flixel::FlxSprite spr = null();
HXLINE(1180)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1181)					spr = ( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) );
            				}
            				else {
HXLINE(1182)					if (::PlayState_obj::instance->modchartTexts->exists(obj)) {
HXLINE(1183)						spr = ( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartTexts->get(obj)) );
            					}
            					else {
HXLINE(1185)						 ::flixel::FlxState spr1;
HXDLIN(1185)						if (::PlayState_obj::instance->isDead) {
HXLINE(1185)							spr1 = ::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE(1185)							spr1 = ::PlayState_obj::instance;
            						}
HXDLIN(1185)						spr = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(spr1,obj)) );
            					}
            				}
HXLINE(1188)				if (::hx::IsNotNull( spr )) {
HXLINE(1190)					if (::hx::IsNotNull( spr->framePixels )) {
HXLINE(1190)						spr->framePixels->getPixel32(x,y);
            					}
HXLINE(1191)					return spr->get_pixels()->getPixel32(x,y);
            				}
HXLINE(1193)				return 0;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(1178)			 cpp::Reference<lua_State> l84 = this->lua;
HXDLIN(1178)			::llua::Lua_helper_obj::callbacks->set(HX_("getPixelColor",33,11,bd,45), ::Dynamic(new _hx_Closure_96()));
HXDLIN(1178)			linc::callbacks::add_callback_function(l84,HX_("getPixelColor",33,11,bd,45));
            		}
HXLINE(1195)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_97) HXARGC(3)
            			int _hx_run(int min, ::Dynamic __o_max,::String __o_exclude){
            		int max = __o_max.Default(2147483647);
            		::String exclude = __o_exclude;
            		if (::hx::IsNull(__o_exclude)) exclude = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1195_new)
HXLINE(1196)				::Array< ::String > excludeArray = exclude.split(HX_(",",2c,00,00,00));
HXLINE(1197)				::Array< int > toExclude = ::Array_obj< int >::__new(0);
HXLINE(1198)				{
HXLINE(1198)					int _g = 0;
HXDLIN(1198)					int _g1 = excludeArray->length;
HXDLIN(1198)					while((_g < _g1)){
HXLINE(1198)						_g = (_g + 1);
HXDLIN(1198)						int i = (_g - 1);
HXLINE(1200)						toExclude->push(::Std_obj::parseInt(::StringTools_obj::trim(excludeArray->__get(i))));
            					}
            				}
HXLINE(1202)				return ::flixel::FlxG_obj::random->_hx_int(min,max,toExclude);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(1195)			 cpp::Reference<lua_State> l85 = this->lua;
HXDLIN(1195)			::llua::Lua_helper_obj::callbacks->set(HX_("getRandomInt",36,23,9c,b6), ::Dynamic(new _hx_Closure_97()));
HXDLIN(1195)			linc::callbacks::add_callback_function(l85,HX_("getRandomInt",36,23,9c,b6));
            		}
HXLINE(1204)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_98) HXARGC(3)
            			Float _hx_run(Float min, ::Dynamic __o_max,::String __o_exclude){
            		Float max = __o_max.Default(1);
            		::String exclude = __o_exclude;
            		if (::hx::IsNull(__o_exclude)) exclude = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1204_new)
HXLINE(1205)				::Array< ::String > excludeArray = exclude.split(HX_(",",2c,00,00,00));
HXLINE(1206)				::Array< Float > toExclude = ::Array_obj< Float >::__new(0);
HXLINE(1207)				{
HXLINE(1207)					int _g = 0;
HXDLIN(1207)					int _g1 = excludeArray->length;
HXDLIN(1207)					while((_g < _g1)){
HXLINE(1207)						_g = (_g + 1);
HXDLIN(1207)						int i = (_g - 1);
HXLINE(1209)						toExclude->push(::Std_obj::parseFloat(::StringTools_obj::trim(excludeArray->__get(i))));
            					}
            				}
HXLINE(1211)				return ::flixel::FlxG_obj::random->_hx_float(min,max,toExclude);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(1204)			 cpp::Reference<lua_State> l86 = this->lua;
HXDLIN(1204)			::llua::Lua_helper_obj::callbacks->set(HX_("getRandomFloat",a3,3b,ca,f4), ::Dynamic(new _hx_Closure_98()));
HXDLIN(1204)			linc::callbacks::add_callback_function(l86,HX_("getRandomFloat",a3,3b,ca,f4));
            		}
HXLINE(1213)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_99) HXARGC(1)
            			bool _hx_run( ::Dynamic __o_chance){
            		Float chance = __o_chance.Default(50);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1214_new)
HXLINE(1214)				return (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < chance);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1213)			 cpp::Reference<lua_State> l87 = this->lua;
HXDLIN(1213)			::llua::Lua_helper_obj::callbacks->set(HX_("getRandomBool",03,ec,62,0d), ::Dynamic(new _hx_Closure_99()));
HXDLIN(1213)			linc::callbacks::add_callback_function(l87,HX_("getRandomBool",03,ec,62,0d));
            		}
HXLINE(1216)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_100, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String dialogueFile,::String music){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1216_new)
HXLINE(1217)				::String path = ::Paths_obj::modFolders(((HX_("data/",c5,0e,88,d4) + ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_("/",2f,00,00,00)) + dialogueFile)) + HX_(".json",56,f1,d6,c2)));
HXLINE(1218)				if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE(1219)					::String library = null();
HXDLIN(1219)					path = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_("/",2f,00,00,00)) + dialogueFile)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
            				}
HXLINE(1221)				_gthis->luaTrace((HX_("Trying to load dialogue: ",ac,f6,02,c7) + path),null(),null());
HXLINE(1223)				if (::sys::FileSystem_obj::exists(path)) {
HXLINE(1224)					 ::Dynamic shit = ::DialogueBoxPsych_obj::parseDialogue(path);
HXLINE(1225)					if ((( (::Array< ::Dynamic>)(shit->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length > 0)) {
HXLINE(1226)						::PlayState_obj::instance->startDialogue(shit,music);
HXLINE(1227)						_gthis->luaTrace(HX_("Successfully loaded dialogue",fa,15,11,36),null(),null());
            					}
            					else {
HXLINE(1229)						_gthis->luaTrace(HX_("Your dialogue file is badly formatted!",40,79,c5,b3),null(),null());
            					}
            				}
            				else {
HXLINE(1232)					_gthis->luaTrace(HX_("Dialogue file not found",b9,62,f0,9e),null(),null());
HXLINE(1233)					if (::PlayState_obj::instance->endingSong) {
HXLINE(1234)						::PlayState_obj::instance->endSong();
            					}
            					else {
HXLINE(1236)						::PlayState_obj::instance->startCountdown();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1216)			 cpp::Reference<lua_State> l88 = this->lua;
HXDLIN(1216)			::llua::Lua_helper_obj::callbacks->set(HX_("startDialogue",9a,8f,4f,ac), ::Dynamic(new _hx_Closure_100(_gthis)));
HXDLIN(1216)			linc::callbacks::add_callback_function(l88,HX_("startDialogue",9a,8f,4f,ac));
            		}
HXLINE(1240)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_101, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String videoFile){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1242_new)
HXLINE(1242)				if (::sys::FileSystem_obj::exists(::Paths_obj::video(videoFile))) {
HXLINE(1243)					::PlayState_obj::instance->startVideo(videoFile);
            				}
            				else {
HXLINE(1245)					_gthis->luaTrace((HX_("Video file not found: ",1c,23,e1,12) + videoFile),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1240)			 cpp::Reference<lua_State> l89 = this->lua;
HXDLIN(1240)			::llua::Lua_helper_obj::callbacks->set(HX_("startVideo",b9,ec,12,53), ::Dynamic(new _hx_Closure_101(_gthis)));
HXDLIN(1240)			linc::callbacks::add_callback_function(l89,HX_("startVideo",b9,ec,12,53));
            		}
HXLINE(1256)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_102) HXARGC(3)
            			void _hx_run(::String sound, ::Dynamic __o_volume, ::Dynamic __o_loop){
            		Float volume = __o_volume.Default(1);
            		bool loop = __o_loop.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1257_new)
HXLINE(1257)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1257)				::String library = null();
HXDLIN(1257)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),sound,library);
HXDLIN(1257)				_hx_tmp->playMusic(file,volume,loop,null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1256)			 cpp::Reference<lua_State> l90 = this->lua;
HXDLIN(1256)			::llua::Lua_helper_obj::callbacks->set(HX_("playMusic",11,fe,3e,31), ::Dynamic(new _hx_Closure_102()));
HXDLIN(1256)			linc::callbacks::add_callback_function(l90,HX_("playMusic",11,fe,3e,31));
            		}
HXLINE(1259)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_104) HXARGC(3)
            			void _hx_run(::String sound, ::Dynamic __o_volume,::String tag){
            		Float volume = __o_volume.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1259_new)
HXLINE(1260)				bool _hx_tmp;
HXDLIN(1260)				if (::hx::IsNotNull( tag )) {
HXLINE(1260)					_hx_tmp = (tag.length > 0);
            				}
            				else {
HXLINE(1260)					_hx_tmp = false;
            				}
HXDLIN(1260)				if (_hx_tmp) {
HXLINE(1261)					tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(1262)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(1263)						 ::flixel::_hx_system::FlxSound _this = ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXDLIN(1263)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(1265)					{
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_103,::String,tag) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1265_new)
HXLINE(1266)							::PlayState_obj::instance->modchartSounds->remove(tag);
HXLINE(1267)							::PlayState_obj::instance->callOnLuas(HX_("onSoundFinished",c2,2a,b1,b9),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(1265)						::Dynamic this1 = ::PlayState_obj::instance->modchartSounds;
HXDLIN(1265)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd value = ::flixel::FlxG_obj::sound;
HXDLIN(1265)						 ::flixel::_hx_system::FlxSound value1 = value->play(::Paths_obj::sound(sound,null()),volume,false,null(),null(), ::Dynamic(new _hx_Closure_103(tag)));
HXDLIN(1265)						( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            					}
HXLINE(1269)					return;
            				}
HXLINE(1271)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1271)				_hx_tmp1->play(::Paths_obj::sound(sound,null()),volume,null(),null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1259)			 cpp::Reference<lua_State> l91 = this->lua;
HXDLIN(1259)			::llua::Lua_helper_obj::callbacks->set(HX_("playSound",3b,ba,b0,a1), ::Dynamic(new _hx_Closure_104()));
HXDLIN(1259)			linc::callbacks::add_callback_function(l91,HX_("playSound",3b,ba,b0,a1));
            		}
HXLINE(1273)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_105) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1274_new)
HXLINE(1274)				bool _hx_tmp;
HXDLIN(1274)				bool _hx_tmp1;
HXDLIN(1274)				if (::hx::IsNotNull( tag )) {
HXLINE(1274)					_hx_tmp1 = (tag.length > 1);
            				}
            				else {
HXLINE(1274)					_hx_tmp1 = false;
            				}
HXDLIN(1274)				if (_hx_tmp1) {
HXLINE(1274)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(1274)					_hx_tmp = false;
            				}
HXDLIN(1274)				if (_hx_tmp) {
HXLINE(1275)					{
HXLINE(1275)						 ::flixel::_hx_system::FlxSound _this = ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXDLIN(1275)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(1276)					::PlayState_obj::instance->modchartSounds->remove(tag);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1273)			 cpp::Reference<lua_State> l92 = this->lua;
HXDLIN(1273)			::llua::Lua_helper_obj::callbacks->set(HX_("stopSound",6d,c5,0e,91), ::Dynamic(new _hx_Closure_105()));
HXDLIN(1273)			linc::callbacks::add_callback_function(l92,HX_("stopSound",6d,c5,0e,91));
            		}
HXLINE(1279)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_106) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1280_new)
HXLINE(1280)				bool _hx_tmp;
HXDLIN(1280)				bool _hx_tmp1;
HXDLIN(1280)				if (::hx::IsNotNull( tag )) {
HXLINE(1280)					_hx_tmp1 = (tag.length > 1);
            				}
            				else {
HXLINE(1280)					_hx_tmp1 = false;
            				}
HXDLIN(1280)				if (_hx_tmp1) {
HXLINE(1280)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(1280)					_hx_tmp = false;
            				}
HXDLIN(1280)				if (_hx_tmp) {
HXLINE(1281)					( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->pause();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1279)			 cpp::Reference<lua_State> l93 = this->lua;
HXDLIN(1279)			::llua::Lua_helper_obj::callbacks->set(HX_("pauseSound",f9,29,45,56), ::Dynamic(new _hx_Closure_106()));
HXDLIN(1279)			linc::callbacks::add_callback_function(l93,HX_("pauseSound",f9,29,45,56));
            		}
HXLINE(1284)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_107) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1285_new)
HXLINE(1285)				bool _hx_tmp;
HXDLIN(1285)				bool _hx_tmp1;
HXDLIN(1285)				if (::hx::IsNotNull( tag )) {
HXLINE(1285)					_hx_tmp1 = (tag.length > 1);
            				}
            				else {
HXLINE(1285)					_hx_tmp1 = false;
            				}
HXDLIN(1285)				if (_hx_tmp1) {
HXLINE(1285)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(1285)					_hx_tmp = false;
            				}
HXDLIN(1285)				if (_hx_tmp) {
HXLINE(1286)					( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->play(null(),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1284)			 cpp::Reference<lua_State> l94 = this->lua;
HXDLIN(1284)			::llua::Lua_helper_obj::callbacks->set(HX_("resumeSound",e2,5f,96,51), ::Dynamic(new _hx_Closure_107()));
HXDLIN(1284)			linc::callbacks::add_callback_function(l94,HX_("resumeSound",e2,5f,96,51));
            		}
HXLINE(1289)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_108) HXARGC(4)
            			void _hx_run(::String tag,Float duration, ::Dynamic __o_fromValue, ::Dynamic __o_toValue){
            		Float fromValue = __o_fromValue.Default(0);
            		Float toValue = __o_toValue.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1290_new)
HXLINE(1290)				bool _hx_tmp;
HXDLIN(1290)				if (::hx::IsNotNull( tag )) {
HXLINE(1290)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1290)					_hx_tmp = true;
            				}
HXDLIN(1290)				if (_hx_tmp) {
HXLINE(1291)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1291)					 ::Dynamic onComplete = null();
HXDLIN(1291)					if (::hx::IsNull( _this->_channel )) {
HXLINE(1291)						_this->play(null(),null(),null());
            					}
HXDLIN(1291)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1291)						_this->fadeTween->cancel();
            					}
HXDLIN(1291)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            				else {
HXLINE(1292)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(1293)						 ::flixel::_hx_system::FlxSound _this = ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXDLIN(1293)						 ::Dynamic onComplete = null();
HXDLIN(1293)						if (::hx::IsNull( _this->_channel )) {
HXLINE(1293)							_this->play(null(),null(),null());
            						}
HXDLIN(1293)						if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1293)							_this->fadeTween->cancel();
            						}
HXDLIN(1293)						_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1289)			 cpp::Reference<lua_State> l95 = this->lua;
HXDLIN(1289)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeIn",b0,52,d8,97), ::Dynamic(new _hx_Closure_108()));
HXDLIN(1289)			linc::callbacks::add_callback_function(l95,HX_("soundFadeIn",b0,52,d8,97));
            		}
HXLINE(1297)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_109) HXARGC(3)
            			void _hx_run(::String tag,Float duration, ::Dynamic __o_toValue){
            		Float toValue = __o_toValue.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1298_new)
HXLINE(1298)				bool _hx_tmp;
HXDLIN(1298)				if (::hx::IsNotNull( tag )) {
HXLINE(1298)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1298)					_hx_tmp = true;
            				}
HXDLIN(1298)				if (_hx_tmp) {
HXLINE(1299)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1299)					 ::Dynamic To = toValue;
HXDLIN(1299)					 ::Dynamic onComplete = null();
HXDLIN(1299)					if (::hx::IsNull( To )) {
HXLINE(1299)						To = 0;
            					}
HXDLIN(1299)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1299)						_this->fadeTween->cancel();
            					}
HXDLIN(1299)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            				else {
HXLINE(1300)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(1301)						 ::flixel::_hx_system::FlxSound _this = ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXDLIN(1301)						 ::Dynamic To = toValue;
HXDLIN(1301)						 ::Dynamic onComplete = null();
HXDLIN(1301)						if (::hx::IsNull( To )) {
HXLINE(1301)							To = 0;
            						}
HXDLIN(1301)						if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1301)							_this->fadeTween->cancel();
            						}
HXDLIN(1301)						_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1297)			 cpp::Reference<lua_State> l96 = this->lua;
HXDLIN(1297)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeOut",63,9b,74,45), ::Dynamic(new _hx_Closure_109()));
HXDLIN(1297)			linc::callbacks::add_callback_function(l96,HX_("soundFadeOut",63,9b,74,45));
            		}
HXLINE(1304)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_110) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1305_new)
HXLINE(1305)				bool _hx_tmp;
HXDLIN(1305)				if (::hx::IsNotNull( tag )) {
HXLINE(1305)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1305)					_hx_tmp = true;
            				}
HXDLIN(1305)				if (_hx_tmp) {
HXLINE(1306)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->fadeTween )) {
HXLINE(1307)						::flixel::FlxG_obj::sound->music->fadeTween->cancel();
            					}
            				}
            				else {
HXLINE(1309)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(1310)						 ::flixel::_hx_system::FlxSound theSound = ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXLINE(1311)						if (::hx::IsNotNull( theSound->fadeTween )) {
HXLINE(1312)							theSound->fadeTween->cancel();
HXLINE(1313)							::PlayState_obj::instance->modchartSounds->remove(tag);
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1304)			 cpp::Reference<lua_State> l97 = this->lua;
HXDLIN(1304)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeCancel",c5,a5,96,fc), ::Dynamic(new _hx_Closure_110()));
HXDLIN(1304)			linc::callbacks::add_callback_function(l97,HX_("soundFadeCancel",c5,a5,96,fc));
            		}
HXLINE(1317)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_111) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1317_new)
HXLINE(1318)				bool _hx_tmp;
HXDLIN(1318)				if (::hx::IsNotNull( tag )) {
HXLINE(1318)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1318)					_hx_tmp = true;
            				}
HXDLIN(1318)				if (_hx_tmp) {
HXLINE(1319)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1320)						return ::flixel::FlxG_obj::sound->music->_volume;
            					}
            				}
            				else {
HXLINE(1322)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(1323)						return ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->_volume;
            					}
            				}
HXLINE(1325)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1317)			 cpp::Reference<lua_State> l98 = this->lua;
HXDLIN(1317)			::llua::Lua_helper_obj::callbacks->set(HX_("getSoundVolume",13,83,1e,9a), ::Dynamic(new _hx_Closure_111()));
HXDLIN(1317)			linc::callbacks::add_callback_function(l98,HX_("getSoundVolume",13,83,1e,9a));
            		}
HXLINE(1327)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_112) HXARGC(2)
            			void _hx_run(::String tag,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1328_new)
HXLINE(1328)				bool _hx_tmp;
HXDLIN(1328)				if (::hx::IsNotNull( tag )) {
HXLINE(1328)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1328)					_hx_tmp = true;
            				}
HXDLIN(1328)				if (_hx_tmp) {
HXLINE(1329)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1330)						::flixel::FlxG_obj::sound->music->set_volume(value);
            					}
            				}
            				else {
HXLINE(1332)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(1333)						( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->set_volume(value);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1327)			 cpp::Reference<lua_State> l99 = this->lua;
HXDLIN(1327)			::llua::Lua_helper_obj::callbacks->set(HX_("setSoundVolume",87,6b,3e,ba), ::Dynamic(new _hx_Closure_112()));
HXDLIN(1327)			linc::callbacks::add_callback_function(l99,HX_("setSoundVolume",87,6b,3e,ba));
            		}
HXLINE(1336)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_113) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1336_new)
HXLINE(1337)				bool _hx_tmp;
HXDLIN(1337)				bool _hx_tmp1;
HXDLIN(1337)				if (::hx::IsNotNull( tag )) {
HXLINE(1337)					_hx_tmp1 = (tag.length > 0);
            				}
            				else {
HXLINE(1337)					_hx_tmp1 = false;
            				}
HXDLIN(1337)				if (_hx_tmp1) {
HXLINE(1337)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(1337)					_hx_tmp = false;
            				}
HXDLIN(1337)				if (_hx_tmp) {
HXLINE(1338)					return ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->_time;
            				}
HXLINE(1340)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1336)			 cpp::Reference<lua_State> l100 = this->lua;
HXDLIN(1336)			::llua::Lua_helper_obj::callbacks->set(HX_("getSoundTime",06,35,21,67), ::Dynamic(new _hx_Closure_113()));
HXDLIN(1336)			linc::callbacks::add_callback_function(l100,HX_("getSoundTime",06,35,21,67));
            		}
HXLINE(1342)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_114) HXARGC(2)
            			void _hx_run(::String tag,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1343_new)
HXLINE(1343)				bool _hx_tmp;
HXDLIN(1343)				bool _hx_tmp1;
HXDLIN(1343)				if (::hx::IsNotNull( tag )) {
HXLINE(1343)					_hx_tmp1 = (tag.length > 0);
            				}
            				else {
HXLINE(1343)					_hx_tmp1 = false;
            				}
HXDLIN(1343)				if (_hx_tmp1) {
HXLINE(1343)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(1343)					_hx_tmp = false;
            				}
HXDLIN(1343)				if (_hx_tmp) {
HXLINE(1344)					 ::flixel::_hx_system::FlxSound theSound = ( ( ::flixel::_hx_system::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXLINE(1345)					if (::hx::IsNotNull( theSound )) {
HXLINE(1346)						bool wasResumed = ::hx::IsNotNull( theSound->_channel );
HXLINE(1347)						theSound->pause();
HXLINE(1348)						theSound->set_time(value);
HXLINE(1349)						if (wasResumed) {
HXLINE(1349)							theSound->play(null(),null(),null());
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1342)			 cpp::Reference<lua_State> l101 = this->lua;
HXDLIN(1342)			::llua::Lua_helper_obj::callbacks->set(HX_("setSoundTime",7a,58,1a,7c), ::Dynamic(new _hx_Closure_114()));
HXDLIN(1342)			linc::callbacks::add_callback_function(l101,HX_("setSoundTime",7a,58,1a,7c));
            		}
HXLINE(1354)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_115, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run( ::Dynamic __o_text1, ::Dynamic __o_text2, ::Dynamic __o_text3, ::Dynamic __o_text4, ::Dynamic __o_text5){
            		 ::Dynamic text1 = __o_text1;
            		if (::hx::IsNull(__o_text1)) text1 = HX_("",00,00,00,00);
            		 ::Dynamic text2 = __o_text2;
            		if (::hx::IsNull(__o_text2)) text2 = HX_("",00,00,00,00);
            		 ::Dynamic text3 = __o_text3;
            		if (::hx::IsNull(__o_text3)) text3 = HX_("",00,00,00,00);
            		 ::Dynamic text4 = __o_text4;
            		if (::hx::IsNull(__o_text4)) text4 = HX_("",00,00,00,00);
            		 ::Dynamic text5 = __o_text5;
            		if (::hx::IsNull(__o_text5)) text5 = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1354_new)
HXLINE(1355)				if (::hx::IsNull( text1 )) {
HXLINE(1355)					text1 = HX_("",00,00,00,00);
            				}
HXLINE(1356)				if (::hx::IsNull( text2 )) {
HXLINE(1356)					text2 = HX_("",00,00,00,00);
            				}
HXLINE(1357)				if (::hx::IsNull( text3 )) {
HXLINE(1357)					text3 = HX_("",00,00,00,00);
            				}
HXLINE(1358)				if (::hx::IsNull( text4 )) {
HXLINE(1358)					text4 = HX_("",00,00,00,00);
            				}
HXLINE(1359)				if (::hx::IsNull( text5 )) {
HXLINE(1359)					text5 = HX_("",00,00,00,00);
            				}
HXLINE(1360)				 ::FunkinLua _gthis1 = _gthis;
HXDLIN(1360)				::String _hx_tmp = (HX_("",00,00,00,00) + ::Std_obj::string(text1));
HXDLIN(1360)				::String _hx_tmp1 = (_hx_tmp + ::Std_obj::string(text2));
HXDLIN(1360)				::String _hx_tmp2 = (_hx_tmp1 + ::Std_obj::string(text3));
HXDLIN(1360)				::String _hx_tmp3 = (_hx_tmp2 + ::Std_obj::string(text4));
HXDLIN(1360)				_gthis1->luaTrace((_hx_tmp3 + ::Std_obj::string(text5)),true,false);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1354)			 cpp::Reference<lua_State> l102 = this->lua;
HXDLIN(1354)			::llua::Lua_helper_obj::callbacks->set(HX_("debugPrint",da,28,6f,c7), ::Dynamic(new _hx_Closure_115(_gthis)));
HXDLIN(1354)			linc::callbacks::add_callback_function(l102,HX_("debugPrint",da,28,6f,c7));
            		}
HXLINE(1362)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_116, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(bool printMessage){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1362_new)
HXLINE(1363)				if (!(_gthis->gonnaClose)) {
HXLINE(1364)					if (printMessage) {
HXLINE(1365)						_gthis->luaTrace((HX_("Stopping lua script: ",e5,e4,4e,c1) + _gthis->scriptName),null(),null());
            					}
HXLINE(1367)					::PlayState_obj::instance->closeLuas->push(_gthis);
            				}
HXLINE(1369)				_gthis->gonnaClose = true;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1362)			 cpp::Reference<lua_State> l103 = this->lua;
HXDLIN(1362)			::llua::Lua_helper_obj::callbacks->set(HX_("close",b8,17,63,48), ::Dynamic(new _hx_Closure_116(_gthis)));
HXDLIN(1362)			linc::callbacks::add_callback_function(l103,HX_("close",b8,17,63,48));
            		}
HXLINE(1372)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_117) HXARGC(5)
            			void _hx_run(::String details,::String state,::String smallImageKey, ::Dynamic hasStartTimestamp, ::Dynamic endTimestamp){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1374_new)
HXLINE(1374)				::DiscordClient_obj::changePresence(details,state,smallImageKey,hasStartTimestamp,endTimestamp);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1372)			 cpp::Reference<lua_State> l104 = this->lua;
HXDLIN(1372)			::llua::Lua_helper_obj::callbacks->set(HX_("changePresence",cb,8f,12,c0), ::Dynamic(new _hx_Closure_117()));
HXDLIN(1372)			linc::callbacks::add_callback_function(l104,HX_("changePresence",cb,8f,12,c0));
            		}
HXLINE(1380)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_118, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String text,int width,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1380_new)
HXLINE(1381)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(1382)				_gthis->resetTextTag(tag);
HXLINE(1383)				 ::ModchartText leText =  ::ModchartText_obj::__alloc( HX_CTX ,x,y,text,( (Float)(width) ));
HXLINE(1384)				::PlayState_obj::instance->modchartTexts->set(tag,leText);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1380)			 cpp::Reference<lua_State> l105 = this->lua;
HXDLIN(1380)			::llua::Lua_helper_obj::callbacks->set(HX_("makeLuaText",37,b6,8a,a8), ::Dynamic(new _hx_Closure_118(_gthis)));
HXDLIN(1380)			linc::callbacks::add_callback_function(l105,HX_("makeLuaText",37,b6,8a,a8));
            		}
HXLINE(1387)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_119) HXARGC(2)
            			void _hx_run(::String tag,::String text){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1387_new)
HXLINE(1388)				 ::flixel::text::FlxText obj;
HXDLIN(1388)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1388)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1388)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1389)				if (::hx::IsNotNull( obj )) {
HXLINE(1391)					obj->set_text(text);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1387)			 cpp::Reference<lua_State> l106 = this->lua;
HXDLIN(1387)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextString",a0,e7,98,e9), ::Dynamic(new _hx_Closure_119()));
HXDLIN(1387)			linc::callbacks::add_callback_function(l106,HX_("setTextString",a0,e7,98,e9));
            		}
HXLINE(1394)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_120) HXARGC(2)
            			void _hx_run(::String tag,int size){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1394_new)
HXLINE(1395)				 ::flixel::text::FlxText obj;
HXDLIN(1395)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1395)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1395)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1396)				if (::hx::IsNotNull( obj )) {
HXLINE(1398)					obj->set_size(size);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1394)			 cpp::Reference<lua_State> l107 = this->lua;
HXDLIN(1394)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextSize",d0,bd,af,7f), ::Dynamic(new _hx_Closure_120()));
HXDLIN(1394)			linc::callbacks::add_callback_function(l107,HX_("setTextSize",d0,bd,af,7f));
            		}
HXLINE(1401)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_121) HXARGC(2)
            			void _hx_run(::String tag,Float width){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1401_new)
HXLINE(1402)				 ::flixel::text::FlxText obj;
HXDLIN(1402)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1402)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1402)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1403)				if (::hx::IsNotNull( obj )) {
HXLINE(1405)					obj->set_fieldWidth(width);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1401)			 cpp::Reference<lua_State> l108 = this->lua;
HXDLIN(1401)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextWidth",17,06,a0,87), ::Dynamic(new _hx_Closure_121()));
HXDLIN(1401)			linc::callbacks::add_callback_function(l108,HX_("setTextWidth",17,06,a0,87));
            		}
HXLINE(1408)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_122) HXARGC(3)
            			void _hx_run(::String tag,int size,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1408_new)
HXLINE(1409)				 ::flixel::text::FlxText obj;
HXDLIN(1409)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1409)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1409)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1410)				if (::hx::IsNotNull( obj )) {
HXLINE(1412)					int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE(1413)					if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(1413)						colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            					}
HXLINE(1415)					obj->set_borderSize(( (Float)(size) ));
HXLINE(1416)					obj->set_borderColor(colorNum);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1408)			 cpp::Reference<lua_State> l109 = this->lua;
HXDLIN(1408)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextBorder",bb,0b,83,3c), ::Dynamic(new _hx_Closure_122()));
HXDLIN(1408)			linc::callbacks::add_callback_function(l109,HX_("setTextBorder",bb,0b,83,3c));
            		}
HXLINE(1419)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_123) HXARGC(2)
            			void _hx_run(::String tag,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1419_new)
HXLINE(1420)				 ::flixel::text::FlxText obj;
HXDLIN(1420)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1420)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1420)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1421)				if (::hx::IsNotNull( obj )) {
HXLINE(1423)					int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE(1424)					if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(1424)						colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            					}
HXLINE(1426)					obj->set_color(colorNum);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1419)			 cpp::Reference<lua_State> l110 = this->lua;
HXDLIN(1419)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextColor",74,c1,99,07), ::Dynamic(new _hx_Closure_123()));
HXDLIN(1419)			linc::callbacks::add_callback_function(l110,HX_("setTextColor",74,c1,99,07));
            		}
HXLINE(1429)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_124) HXARGC(2)
            			void _hx_run(::String tag,::String newFont){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1429_new)
HXLINE(1430)				 ::flixel::text::FlxText obj;
HXDLIN(1430)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1430)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1430)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1431)				if (::hx::IsNotNull( obj )) {
HXLINE(1433)					::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + newFont));
HXDLIN(1433)					::String _hx_tmp;
HXDLIN(1433)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE(1433)						_hx_tmp = file;
            					}
            					else {
HXLINE(1433)						_hx_tmp = (HX_("assets/fonts/",37,ff,a5,9c) + newFont);
            					}
HXDLIN(1433)					obj->set_font(_hx_tmp);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1429)			 cpp::Reference<lua_State> l111 = this->lua;
HXDLIN(1429)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextFont",de,7a,1c,77), ::Dynamic(new _hx_Closure_124()));
HXDLIN(1429)			linc::callbacks::add_callback_function(l111,HX_("setTextFont",de,7a,1c,77));
            		}
HXLINE(1436)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_125) HXARGC(2)
            			void _hx_run(::String tag,bool italic){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1436_new)
HXLINE(1437)				 ::flixel::text::FlxText obj;
HXDLIN(1437)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1437)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1437)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1438)				if (::hx::IsNotNull( obj )) {
HXLINE(1440)					obj->set_italic(italic);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1436)			 cpp::Reference<lua_State> l112 = this->lua;
HXDLIN(1436)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextItalic",bf,ed,cc,de), ::Dynamic(new _hx_Closure_125()));
HXDLIN(1436)			linc::callbacks::add_callback_function(l112,HX_("setTextItalic",bf,ed,cc,de));
            		}
HXLINE(1443)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_126) HXARGC(2)
            			void _hx_run(::String tag,::String __o_alignment){
            		::String alignment = __o_alignment;
            		if (::hx::IsNull(__o_alignment)) alignment = HX_("left",07,08,b0,47);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1443_new)
HXLINE(1444)				 ::flixel::text::FlxText obj;
HXDLIN(1444)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1444)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1444)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1445)				if (::hx::IsNotNull( obj )) {
HXLINE(1447)					obj->set_alignment(HX_("left",07,08,b0,47));
HXLINE(1448)					::String _hx_switch_15 = ::StringTools_obj::trim(alignment).toLowerCase();
            					if (  (_hx_switch_15==HX_("center",d5,25,db,05)) ){
HXLINE(1453)						obj->set_alignment(HX_("center",d5,25,db,05));
HXDLIN(1453)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_15==HX_("right",dc,0b,64,e9)) ){
HXLINE(1451)						obj->set_alignment(HX_("right",dc,0b,64,e9));
HXDLIN(1451)						goto _hx_goto_25;
            					}
            					_hx_goto_25:;
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1443)			 cpp::Reference<lua_State> l113 = this->lua;
HXDLIN(1443)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextAlignment",74,0f,33,62), ::Dynamic(new _hx_Closure_126()));
HXDLIN(1443)			linc::callbacks::add_callback_function(l113,HX_("setTextAlignment",74,0f,33,62));
            		}
HXLINE(1458)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_127) HXARGC(1)
            			::String _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1458_new)
HXLINE(1459)				 ::flixel::text::FlxText obj;
HXDLIN(1459)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1459)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1459)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1460)				if (::hx::IsNotNull( obj )) {
HXLINE(1462)					return obj->text;
            				}
HXLINE(1464)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1458)			 cpp::Reference<lua_State> l114 = this->lua;
HXDLIN(1458)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextString",94,05,93,a4), ::Dynamic(new _hx_Closure_127()));
HXDLIN(1458)			linc::callbacks::add_callback_function(l114,HX_("getTextString",94,05,93,a4));
            		}
HXLINE(1466)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_128) HXARGC(1)
            			int _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1466_new)
HXLINE(1467)				 ::flixel::text::FlxText obj;
HXDLIN(1467)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1467)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1467)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1468)				if (::hx::IsNotNull( obj )) {
HXLINE(1470)					return ::Std_obj::_hx_int(( (Float)(obj->_defaultFormat->size) ));
            				}
HXLINE(1472)				return -1;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1466)			 cpp::Reference<lua_State> l115 = this->lua;
HXDLIN(1466)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextSize",c4,b6,42,75), ::Dynamic(new _hx_Closure_128()));
HXDLIN(1466)			linc::callbacks::add_callback_function(l115,HX_("getTextSize",c4,b6,42,75));
            		}
HXLINE(1474)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_129) HXARGC(1)
            			::String _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1474_new)
HXLINE(1475)				 ::flixel::text::FlxText obj;
HXDLIN(1475)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1475)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1475)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1476)				if (::hx::IsNotNull( obj )) {
HXLINE(1478)					return obj->_font;
            				}
HXLINE(1480)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1474)			 cpp::Reference<lua_State> l116 = this->lua;
HXDLIN(1474)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextFont",d2,73,af,6c), ::Dynamic(new _hx_Closure_129()));
HXDLIN(1474)			linc::callbacks::add_callback_function(l116,HX_("getTextFont",d2,73,af,6c));
            		}
HXLINE(1482)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_130) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1482_new)
HXLINE(1483)				 ::flixel::text::FlxText obj;
HXDLIN(1483)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1483)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(1483)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(1484)				if (::hx::IsNotNull( obj )) {
HXLINE(1486)					return obj->get_fieldWidth();
            				}
HXLINE(1488)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1482)			 cpp::Reference<lua_State> l117 = this->lua;
HXDLIN(1482)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextWidth",a3,e2,a6,72), ::Dynamic(new _hx_Closure_130()));
HXDLIN(1482)			linc::callbacks::add_callback_function(l117,HX_("getTextWidth",a3,e2,a6,72));
            		}
HXLINE(1491)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_131) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1492_new)
HXLINE(1492)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(1493)					 ::ModchartText shit = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
HXLINE(1494)					if (!(shit->wasAdded)) {
HXLINE(1495)						 ::flixel::FlxState _hx_tmp;
HXDLIN(1495)						if (::PlayState_obj::instance->isDead) {
HXLINE(1495)							_hx_tmp = ::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE(1495)							_hx_tmp = ::PlayState_obj::instance;
            						}
HXDLIN(1495)						_hx_tmp->add(shit).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1496)						shit->wasAdded = true;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1491)			 cpp::Reference<lua_State> l118 = this->lua;
HXDLIN(1491)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaText",64,ba,0a,cc), ::Dynamic(new _hx_Closure_131()));
HXDLIN(1491)			linc::callbacks::add_callback_function(l118,HX_("addLuaText",64,ba,0a,cc));
            		}
HXLINE(1501)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_132) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_destroy){
            		bool destroy = __o_destroy.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1501_new)
HXLINE(1502)				if (!(::PlayState_obj::instance->modchartTexts->exists(tag))) {
HXLINE(1503)					return;
            				}
HXLINE(1506)				 ::ModchartText pee = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
HXLINE(1507)				if (destroy) {
HXLINE(1508)					pee->kill();
            				}
HXLINE(1511)				if (pee->wasAdded) {
HXLINE(1512)					 ::flixel::FlxState _hx_tmp;
HXDLIN(1512)					if (::PlayState_obj::instance->isDead) {
HXLINE(1512)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1512)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN(1512)					_hx_tmp->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1513)					pee->wasAdded = false;
            				}
HXLINE(1516)				if (destroy) {
HXLINE(1517)					pee->destroy();
HXLINE(1518)					::PlayState_obj::instance->modchartTexts->remove(tag);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1501)			 cpp::Reference<lua_State> l119 = this->lua;
HXDLIN(1501)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaText",a1,ea,3a,3d), ::Dynamic(new _hx_Closure_132()));
HXDLIN(1501)			linc::callbacks::add_callback_function(l119,HX_("removeLuaText",a1,ea,3a,3d));
            		}
HXLINE(1524)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_133, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,int width,int height,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1524_new)
HXLINE(1525)				_gthis->luaTrace(HX_("luaSpriteMakeGraphic is deprecated! Use makeGraphic instead",7e,b6,57,cc),false,true);
HXLINE(1526)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1527)					int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE(1528)					if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(1528)						colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            					}
HXLINE(1530)					( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) )->makeGraphic(width,height,colorNum,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1524)			 cpp::Reference<lua_State> l120 = this->lua;
HXDLIN(1524)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteMakeGraphic",7d,d9,93,6c), ::Dynamic(new _hx_Closure_133(_gthis)));
HXDLIN(1524)			linc::callbacks::add_callback_function(l120,HX_("luaSpriteMakeGraphic",7d,d9,93,6c));
            		}
HXLINE(1533)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_134, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String name,::String prefix, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		int framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1533_new)
HXLINE(1534)				_gthis->luaTrace(HX_("luaSpriteAddAnimationByPrefix is deprecated! Use addAnimationByPrefix instead",78,72,70,61),false,true);
HXLINE(1535)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1536)					 ::ModchartSprite cock = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(1537)					cock->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE(1538)					if (::hx::IsNull( cock->animation->_curAnim )) {
HXLINE(1539)						cock->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1533)			 cpp::Reference<lua_State> l121 = this->lua;
HXDLIN(1533)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteAddAnimationByPrefix",09,f3,e9,6f), ::Dynamic(new _hx_Closure_134(_gthis)));
HXDLIN(1533)			linc::callbacks::add_callback_function(l121,HX_("luaSpriteAddAnimationByPrefix",09,f3,e9,6f));
            		}
HXLINE(1543)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_135, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String name,::String prefix,::String indices, ::Dynamic __o_framerate){
            		int framerate = __o_framerate.Default(24);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1543_new)
HXLINE(1544)				_gthis->luaTrace(HX_("luaSpriteAddAnimationByIndices is deprecated! Use addAnimationByIndices instead",de,64,41,01),false,true);
HXLINE(1545)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1546)					::Array< ::String > strIndices = ::StringTools_obj::trim(indices).split(HX_(",",2c,00,00,00));
HXLINE(1547)					::Array< int > die = ::Array_obj< int >::__new(0);
HXLINE(1548)					{
HXLINE(1548)						int _g = 0;
HXDLIN(1548)						int _g1 = strIndices->length;
HXDLIN(1548)						while((_g < _g1)){
HXLINE(1548)							_g = (_g + 1);
HXDLIN(1548)							int i = (_g - 1);
HXLINE(1549)							die->push(::Std_obj::parseInt(strIndices->__get(i)));
            						}
            					}
HXLINE(1551)					 ::ModchartSprite pussy = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(1552)					pussy->animation->addByIndices(name,prefix,die,HX_("",00,00,00,00),framerate,false,null(),null());
HXLINE(1553)					if (::hx::IsNull( pussy->animation->_curAnim )) {
HXLINE(1554)						pussy->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1543)			 cpp::Reference<lua_State> l122 = this->lua;
HXDLIN(1543)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteAddAnimationByIndices",d0,75,d7,2e), ::Dynamic(new _hx_Closure_135(_gthis)));
HXDLIN(1543)			linc::callbacks::add_callback_function(l122,HX_("luaSpriteAddAnimationByIndices",d0,75,d7,2e));
            		}
HXLINE(1558)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_136, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,::String name, ::Dynamic __o_forced){
            		bool forced = __o_forced.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1558_new)
HXLINE(1559)				_gthis->luaTrace(HX_("luaSpritePlayAnimation is deprecated! Use objectPlayAnimation instead",3f,77,65,0a),false,true);
HXLINE(1560)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1561)					( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) )->animation->play(name,forced,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1558)			 cpp::Reference<lua_State> l123 = this->lua;
HXDLIN(1558)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpritePlayAnimation",53,e8,9a,80), ::Dynamic(new _hx_Closure_136(_gthis)));
HXDLIN(1558)			linc::callbacks::add_callback_function(l123,HX_("luaSpritePlayAnimation",53,e8,9a,80));
            		}
HXLINE(1564)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_137, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1564_new)
HXLINE(1565)				_gthis->luaTrace(HX_("setLuaSpriteCamera is deprecated! Use setObjectCamera instead",27,8c,42,42),false,true);
HXLINE(1566)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1567)					 ::ModchartSprite _hx_tmp = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXDLIN(1567)					_hx_tmp->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE(1568)					return true;
            				}
HXLINE(1570)				_gthis->luaTrace(((HX_("Lua sprite with tag: ",99,05,27,20) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE(1571)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1564)			 cpp::Reference<lua_State> l124 = this->lua;
HXDLIN(1564)			::llua::Lua_helper_obj::callbacks->set(HX_("setLuaSpriteCamera",e0,14,44,e8), ::Dynamic(new _hx_Closure_137(_gthis)));
HXDLIN(1564)			linc::callbacks::add_callback_function(l124,HX_("setLuaSpriteCamera",e0,14,44,e8));
            		}
HXLINE(1573)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_138, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,Float scrollX,Float scrollY){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1573_new)
HXLINE(1574)				_gthis->luaTrace(HX_("setLuaSpriteScrollFactor is deprecated! Use setScrollFactor instead",28,df,47,75),false,true);
HXLINE(1575)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1576)					( ( ::flixel::FlxObject)(::PlayState_obj::instance->modchartSprites->get(tag)) )->scrollFactor->set(scrollX,scrollY);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1573)			 cpp::Reference<lua_State> l125 = this->lua;
HXDLIN(1573)			::llua::Lua_helper_obj::callbacks->set(HX_("setLuaSpriteScrollFactor",37,99,c8,2a), ::Dynamic(new _hx_Closure_138(_gthis)));
HXDLIN(1573)			linc::callbacks::add_callback_function(l125,HX_("setLuaSpriteScrollFactor",37,99,c8,2a));
            		}
HXLINE(1579)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_139, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1579_new)
HXLINE(1580)				_gthis->luaTrace(HX_("scaleLuaSprite is deprecated! Use scaleObject instead",57,88,a4,6e),false,true);
HXLINE(1581)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1582)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(1583)					shit->scale->set(x,y);
HXLINE(1584)					shit->updateHitbox();
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1579)			 cpp::Reference<lua_State> l126 = this->lua;
HXDLIN(1579)			::llua::Lua_helper_obj::callbacks->set(HX_("scaleLuaSprite",f3,b3,91,0f), ::Dynamic(new _hx_Closure_139(_gthis)));
HXDLIN(1579)			linc::callbacks::add_callback_function(l126,HX_("scaleLuaSprite",f3,b3,91,0f));
            		}
HXLINE(1587)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_140, ::FunkinLua,_gthis) HXARGC(2)
            			 ::Dynamic _hx_run(::String tag,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1587_new)
HXLINE(1588)				_gthis->luaTrace(HX_("getPropertyLuaSprite is deprecated! Use getProperty instead",fa,f2,3a,c7),false,true);
HXLINE(1589)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1590)					::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1591)					if ((killMe->length > 1)) {
HXLINE(1592)						 ::ModchartSprite coverMeInPiss = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXDLIN(1592)						 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE(1593)						{
HXLINE(1593)							int _g = 1;
HXDLIN(1593)							int _g1 = (killMe->length - 1);
HXDLIN(1593)							while((_g < _g1)){
HXLINE(1593)								_g = (_g + 1);
HXDLIN(1593)								int i = (_g - 1);
HXLINE(1594)								coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            							}
            						}
HXLINE(1596)						return ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)));
            					}
HXLINE(1598)					return ::Reflect_obj::getProperty(::PlayState_obj::instance->modchartSprites->get(tag),variable);
            				}
HXLINE(1600)				return null();
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1587)			 cpp::Reference<lua_State> l127 = this->lua;
HXDLIN(1587)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyLuaSprite",52,5f,33,7c), ::Dynamic(new _hx_Closure_140(_gthis)));
HXDLIN(1587)			linc::callbacks::add_callback_function(l127,HX_("getPropertyLuaSprite",52,5f,33,7c));
            		}
HXLINE(1602)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_141, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1602_new)
HXLINE(1603)				_gthis->luaTrace(HX_("setPropertyLuaSprite is deprecated! Use setProperty instead",12,75,58,14),false,true);
HXLINE(1604)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1605)					::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1606)					if ((killMe->length > 1)) {
HXLINE(1607)						 ::ModchartSprite coverMeInPiss = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXDLIN(1607)						 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE(1608)						{
HXLINE(1608)							int _g = 1;
HXDLIN(1608)							int _g1 = (killMe->length - 1);
HXDLIN(1608)							while((_g < _g1)){
HXLINE(1608)								_g = (_g + 1);
HXDLIN(1608)								int i = (_g - 1);
HXLINE(1609)								coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            							}
            						}
HXLINE(1611)						::Reflect_obj::setProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)),value);
HXDLIN(1611)						return;
            					}
HXLINE(1613)					::Reflect_obj::setProperty(::PlayState_obj::instance->modchartSprites->get(tag),variable,value);
HXDLIN(1613)					return;
            				}
HXLINE(1615)				_gthis->luaTrace(((HX_("Lua sprite with tag: ",99,05,27,20) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1602)			 cpp::Reference<lua_State> l128 = this->lua;
HXDLIN(1602)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyLuaSprite",c6,16,eb,48), ::Dynamic(new _hx_Closure_141(_gthis)));
HXDLIN(1602)			linc::callbacks::add_callback_function(l128,HX_("setPropertyLuaSprite",c6,16,eb,48));
            		}
HXLINE(1617)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_142, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(Float duration, ::Dynamic __o_fromValue, ::Dynamic __o_toValue){
            		Float fromValue = __o_fromValue.Default(0);
            		Float toValue = __o_toValue.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1617_new)
HXLINE(1618)				{
HXLINE(1618)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1618)					 ::Dynamic onComplete = null();
HXDLIN(1618)					if (::hx::IsNull( _this->_channel )) {
HXLINE(1618)						_this->play(null(),null(),null());
            					}
HXDLIN(1618)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1618)						_this->fadeTween->cancel();
            					}
HXDLIN(1618)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE(1619)				_gthis->luaTrace(HX_("musicFadeIn is deprecated! Use soundFadeIn instead.",63,a3,e0,ef),false,true);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1617)			 cpp::Reference<lua_State> l129 = this->lua;
HXDLIN(1617)			::llua::Lua_helper_obj::callbacks->set(HX_("musicFadeIn",06,1b,ec,26), ::Dynamic(new _hx_Closure_142(_gthis)));
HXDLIN(1617)			linc::callbacks::add_callback_function(l129,HX_("musicFadeIn",06,1b,ec,26));
            		}
HXLINE(1622)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_143, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(Float duration, ::Dynamic __o_toValue){
            		Float toValue = __o_toValue.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1622_new)
HXLINE(1623)				{
HXLINE(1623)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1623)					 ::Dynamic To = toValue;
HXDLIN(1623)					 ::Dynamic onComplete = null();
HXDLIN(1623)					if (::hx::IsNull( To )) {
HXLINE(1623)						To = 0;
            					}
HXDLIN(1623)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1623)						_this->fadeTween->cancel();
            					}
HXDLIN(1623)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE(1624)				_gthis->luaTrace(HX_("musicFadeOut is deprecated! Use soundFadeOut instead.",3b,a5,4f,13),false,true);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1622)			 cpp::Reference<lua_State> l130 = this->lua;
HXDLIN(1622)			::llua::Lua_helper_obj::callbacks->set(HX_("musicFadeOut",4d,1e,b0,e7), ::Dynamic(new _hx_Closure_143(_gthis)));
HXDLIN(1622)			linc::callbacks::add_callback_function(l130,HX_("musicFadeOut",4d,1e,b0,e7));
            		}
HXLINE(1631)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_144) HXARGC(2)
            			void _hx_run(::String camera, ::Dynamic __o_chromeOffset){
            		Float chromeOffset = __o_chromeOffset.Default(((Float)0.005));
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1633_new)
HXLINE(1633)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1633)				_hx_tmp->addShaderToCamera(camera, ::ChromaticAberrationEffect_obj::__alloc( HX_CTX ,chromeOffset));
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1631)			 cpp::Reference<lua_State> l131 = this->lua;
HXDLIN(1631)			::llua::Lua_helper_obj::callbacks->set(HX_("addChromaticAbberationEffect",2f,a4,ae,ea), ::Dynamic(new _hx_Closure_144()));
HXDLIN(1631)			linc::callbacks::add_callback_function(l131,HX_("addChromaticAbberationEffect",2f,a4,ae,ea));
            		}
HXLINE(1637)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_145) HXARGC(2)
            			void _hx_run(::String camera, ::Dynamic __o_lockAlpha){
            		bool lockAlpha = __o_lockAlpha.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1639_new)
HXLINE(1639)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1639)				_hx_tmp->addShaderToCamera(camera, ::ScanlineEffect_obj::__alloc( HX_CTX ,lockAlpha));
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1637)			 cpp::Reference<lua_State> l132 = this->lua;
HXDLIN(1637)			::llua::Lua_helper_obj::callbacks->set(HX_("addScanlineEffect",63,8f,85,35), ::Dynamic(new _hx_Closure_145()));
HXDLIN(1637)			linc::callbacks::add_callback_function(l132,HX_("addScanlineEffect",63,8f,85,35));
            		}
HXLINE(1642)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_146) HXARGC(4)
            			void _hx_run(::String camera,Float grainSize,Float lumAmount, ::Dynamic __o_lockAlpha){
            		bool lockAlpha = __o_lockAlpha.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1644_new)
HXLINE(1644)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1644)				_hx_tmp->addShaderToCamera(camera, ::GrainEffect_obj::__alloc( HX_CTX ,grainSize,lumAmount,lockAlpha));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1642)			 cpp::Reference<lua_State> l133 = this->lua;
HXDLIN(1642)			::llua::Lua_helper_obj::callbacks->set(HX_("addGrainEffect",8b,fd,17,e7), ::Dynamic(new _hx_Closure_146()));
HXDLIN(1642)			linc::callbacks::add_callback_function(l133,HX_("addGrainEffect",8b,fd,17,e7));
            		}
HXLINE(1647)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_147) HXARGC(3)
            			void _hx_run(::String camera,Float blurAmount,Float center){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1649_new)
HXLINE(1649)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1649)				_hx_tmp->addShaderToCamera(camera, ::TiltshiftEffect_obj::__alloc( HX_CTX ,blurAmount,center));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1647)			 cpp::Reference<lua_State> l134 = this->lua;
HXDLIN(1647)			::llua::Lua_helper_obj::callbacks->set(HX_("addTiltshiftEffect",75,df,bf,9f), ::Dynamic(new _hx_Closure_147()));
HXDLIN(1647)			linc::callbacks::add_callback_function(l134,HX_("addTiltshiftEffect",75,df,bf,9f));
            		}
HXLINE(1652)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_148) HXARGC(5)
            			void _hx_run(::String camera, ::Dynamic __o_glitchFactor, ::Dynamic __o_distortion, ::Dynamic __o_perspectiveOn, ::Dynamic __o_vignetteMoving){
            		Float glitchFactor = __o_glitchFactor.Default(((Float)0.0));
            		bool distortion = __o_distortion.Default(true);
            		bool perspectiveOn = __o_perspectiveOn.Default(true);
            		bool vignetteMoving = __o_vignetteMoving.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1654_new)
HXLINE(1654)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1654)				_hx_tmp->addShaderToCamera(camera, ::VCRDistortionEffect_obj::__alloc( HX_CTX ,glitchFactor,distortion,perspectiveOn,vignetteMoving));
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1652)			 cpp::Reference<lua_State> l135 = this->lua;
HXDLIN(1652)			::llua::Lua_helper_obj::callbacks->set(HX_("addVCREffect",b5,3e,e6,19), ::Dynamic(new _hx_Closure_148()));
HXDLIN(1652)			linc::callbacks::add_callback_function(l135,HX_("addVCREffect",b5,3e,e6,19));
            		}
HXLINE(1657)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_149) HXARGC(4)
            			void _hx_run(::String camera, ::Dynamic __o_waveSpeed, ::Dynamic __o_waveFrq, ::Dynamic __o_waveAmp){
            		Float waveSpeed = __o_waveSpeed.Default(((Float)0.1));
            		Float waveFrq = __o_waveFrq.Default(((Float)0.1));
            		Float waveAmp = __o_waveAmp.Default(((Float)0.1));
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1659_new)
HXLINE(1659)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1659)				_hx_tmp->addShaderToCamera(camera, ::GlitchEffect_obj::__alloc( HX_CTX ,waveSpeed,waveFrq,waveAmp));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1657)			 cpp::Reference<lua_State> l136 = this->lua;
HXDLIN(1657)			::llua::Lua_helper_obj::callbacks->set(HX_("addGlitchEffect",27,b4,8a,64), ::Dynamic(new _hx_Closure_149()));
HXDLIN(1657)			linc::callbacks::add_callback_function(l136,HX_("addGlitchEffect",27,b4,8a,64));
            		}
HXLINE(1662)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_150) HXARGC(4)
            			void _hx_run(::String camera, ::Dynamic __o_waveSpeed, ::Dynamic __o_waveFrq, ::Dynamic __o_waveAmp){
            		Float waveSpeed = __o_waveSpeed.Default(((Float)0.1));
            		Float waveFrq = __o_waveFrq.Default(((Float)0.1));
            		Float waveAmp = __o_waveAmp.Default(((Float)0.1));
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1664_new)
HXLINE(1664)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1664)				_hx_tmp->addShaderToCamera(camera, ::PulseEffect_obj::__alloc( HX_CTX ,waveSpeed,waveFrq,waveAmp));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1662)			 cpp::Reference<lua_State> l137 = this->lua;
HXDLIN(1662)			::llua::Lua_helper_obj::callbacks->set(HX_("addPulseEffect",e9,f5,df,85), ::Dynamic(new _hx_Closure_150()));
HXDLIN(1662)			linc::callbacks::add_callback_function(l137,HX_("addPulseEffect",e9,f5,df,85));
            		}
HXLINE(1667)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_151) HXARGC(4)
            			void _hx_run(::String camera, ::Dynamic __o_waveSpeed, ::Dynamic __o_waveFrq, ::Dynamic __o_waveAmp){
            		Float waveSpeed = __o_waveSpeed.Default(((Float)0.1));
            		Float waveFrq = __o_waveFrq.Default(((Float)0.1));
            		Float waveAmp = __o_waveAmp.Default(((Float)0.1));
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1669_new)
HXLINE(1669)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1669)				_hx_tmp->addShaderToCamera(camera, ::DistortBGEffect_obj::__alloc( HX_CTX ,waveSpeed,waveFrq,waveAmp));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1667)			 cpp::Reference<lua_State> l138 = this->lua;
HXDLIN(1667)			::llua::Lua_helper_obj::callbacks->set(HX_("addDistortionEffect",0f,c7,6f,1f), ::Dynamic(new _hx_Closure_151()));
HXDLIN(1667)			linc::callbacks::add_callback_function(l138,HX_("addDistortionEffect",0f,c7,6f,1f));
            		}
HXLINE(1672)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_152) HXARGC(2)
            			void _hx_run(::String camera, ::Dynamic __o_lockAlpha){
            		bool lockAlpha = __o_lockAlpha.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1674_new)
HXLINE(1674)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1674)				_hx_tmp->addShaderToCamera(camera, ::InvertColorsEffect_obj::__alloc( HX_CTX ,lockAlpha));
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1672)			 cpp::Reference<lua_State> l139 = this->lua;
HXDLIN(1672)			::llua::Lua_helper_obj::callbacks->set(HX_("addInvertEffect",08,96,5f,9e), ::Dynamic(new _hx_Closure_152()));
HXDLIN(1672)			linc::callbacks::add_callback_function(l139,HX_("addInvertEffect",08,96,5f,9e));
            		}
HXLINE(1677)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_153) HXARGC(1)
            			void _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1679_new)
HXLINE(1679)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1679)				_hx_tmp->addShaderToCamera(camera, ::GreyscaleEffect_obj::__alloc( HX_CTX ));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1677)			 cpp::Reference<lua_State> l140 = this->lua;
HXDLIN(1677)			::llua::Lua_helper_obj::callbacks->set(HX_("addGreyscaleEffect",9b,7e,f7,d5), ::Dynamic(new _hx_Closure_153()));
HXDLIN(1677)			linc::callbacks::add_callback_function(l140,HX_("addGreyscaleEffect",9b,7e,f7,d5));
            		}
HXLINE(1682)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_154) HXARGC(1)
            			void _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1684_new)
HXLINE(1684)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1684)				_hx_tmp->addShaderToCamera(camera, ::GreyscaleEffect_obj::__alloc( HX_CTX ));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1682)			 cpp::Reference<lua_State> l141 = this->lua;
HXDLIN(1682)			::llua::Lua_helper_obj::callbacks->set(HX_("addGrayscaleEffect",97,88,f5,be), ::Dynamic(new _hx_Closure_154()));
HXDLIN(1682)			linc::callbacks::add_callback_function(l141,HX_("addGrayscaleEffect",97,88,f5,be));
            		}
HXLINE(1687)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_155) HXARGC(5)
            			void _hx_run(::String camera, ::Dynamic __o_xrotation, ::Dynamic __o_yrotation, ::Dynamic __o_zrotation, ::Dynamic __o_depth){
            		Float xrotation = __o_xrotation.Default(0);
            		Float yrotation = __o_yrotation.Default(0);
            		Float zrotation = __o_zrotation.Default(0);
            		Float depth = __o_depth.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1689_new)
HXLINE(1689)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1689)				_hx_tmp->addShaderToCamera(camera, ::ThreeDEffect_obj::__alloc( HX_CTX ,xrotation,yrotation,zrotation,depth));
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1687)			 cpp::Reference<lua_State> l142 = this->lua;
HXDLIN(1687)			::llua::Lua_helper_obj::callbacks->set(HX_("add3DEffect",43,91,a2,5d), ::Dynamic(new _hx_Closure_155()));
HXDLIN(1687)			linc::callbacks::add_callback_function(l142,HX_("add3DEffect",43,91,a2,5d));
            		}
HXLINE(1692)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_156) HXARGC(3)
            			void _hx_run(::String camera, ::Dynamic __o_intensity, ::Dynamic __o_blurSize){
            		Float intensity = __o_intensity.Default(((Float)0.35));
            		Float blurSize = __o_blurSize.Default(((Float)1.0));
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1694_new)
HXLINE(1694)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN(1694)				_hx_tmp->addShaderToCamera(camera, ::BloomEffect_obj::__alloc( HX_CTX ,(blurSize / ((Float)512.0)),intensity));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1692)			 cpp::Reference<lua_State> l143 = this->lua;
HXDLIN(1692)			::llua::Lua_helper_obj::callbacks->set(HX_("addBloomEffect",13,0a,ce,97), ::Dynamic(new _hx_Closure_156()));
HXDLIN(1692)			linc::callbacks::add_callback_function(l143,HX_("addBloomEffect",13,0a,ce,97));
            		}
HXLINE(1697)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_157) HXARGC(1)
            			void _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1698_new)
HXLINE(1698)				::PlayState_obj::instance->clearShaderFromCamera(camera);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1697)			 cpp::Reference<lua_State> l144 = this->lua;
HXDLIN(1697)			::llua::Lua_helper_obj::callbacks->set(HX_("clearEffects",b5,96,ca,09), ::Dynamic(new _hx_Closure_157()));
HXDLIN(1697)			linc::callbacks::add_callback_function(l144,HX_("clearEffects",b5,96,ca,09));
            		}
HXLINE(1700)		::DiscordClient_obj::addLuaCallbacks(this->lua);
HXLINE(1702)		this->call(HX_("onCreate",7b,5d,bc,5b),::cpp::VirtualArray_obj::__new(0));
            	}

Dynamic FunkinLua_obj::__CreateEmpty() { return new FunkinLua_obj; }

void *FunkinLua_obj::_hx_vtable = 0;

Dynamic FunkinLua_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunkinLua_obj > _hx_result = new FunkinLua_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FunkinLua_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x574d0d5f;
}

 ::flixel::text::FlxText FunkinLua_obj::getTextObject(::String name){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1708_getTextObject)
HXDLIN(1708)		if (::PlayState_obj::instance->modchartTexts->exists(name)) {
HXDLIN(1708)			return ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(name)) );
            		}
            		else {
HXDLIN(1708)			return ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,name)) );
            		}
HXDLIN(1708)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getTextObject,return )

 ::Dynamic FunkinLua_obj::getGroupStuff( ::Dynamic leArray,::String variable){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1711_getGroupStuff)
HXLINE(1712)		::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1713)		if ((killMe->length > 1)) {
HXLINE(1714)			 ::Dynamic coverMeInPiss = ::Reflect_obj::getProperty(leArray,killMe->__get(0));
HXLINE(1715)			{
HXLINE(1715)				int _g = 1;
HXDLIN(1715)				int _g1 = (killMe->length - 1);
HXDLIN(1715)				while((_g < _g1)){
HXLINE(1715)					_g = (_g + 1);
HXDLIN(1715)					int i = (_g - 1);
HXLINE(1716)					coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            				}
            			}
HXLINE(1718)			return ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get((killMe->length - 1)));
            		}
HXLINE(1720)		return ::Reflect_obj::getProperty(leArray,variable);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,getGroupStuff,return )

void FunkinLua_obj::setGroupStuff( ::Dynamic leArray,::String variable, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1723_setGroupStuff)
HXLINE(1724)		::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1725)		if ((killMe->length > 1)) {
HXLINE(1726)			 ::Dynamic coverMeInPiss = ::Reflect_obj::getProperty(leArray,killMe->__get(0));
HXLINE(1727)			{
HXLINE(1727)				int _g = 1;
HXDLIN(1727)				int _g1 = (killMe->length - 1);
HXDLIN(1727)				while((_g < _g1)){
HXLINE(1727)					_g = (_g + 1);
HXDLIN(1727)					int i = (_g - 1);
HXLINE(1728)					coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            				}
            			}
HXLINE(1730)			::Reflect_obj::setProperty(coverMeInPiss,killMe->__get((killMe->length - 1)),value);
HXLINE(1731)			return;
            		}
HXLINE(1733)		::Reflect_obj::setProperty(leArray,variable,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FunkinLua_obj,setGroupStuff,(void))

void FunkinLua_obj::resetTextTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1736_resetTextTag)
HXLINE(1737)		if (!(::PlayState_obj::instance->modchartTexts->exists(tag))) {
HXLINE(1738)			return;
            		}
HXLINE(1741)		 ::ModchartText pee = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
HXLINE(1742)		pee->kill();
HXLINE(1743)		if (pee->wasAdded) {
HXLINE(1744)			::PlayState_obj::instance->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(1746)		pee->destroy();
HXLINE(1747)		::PlayState_obj::instance->modchartTexts->remove(tag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,resetTextTag,(void))

void FunkinLua_obj::resetSpriteTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1750_resetSpriteTag)
HXLINE(1751)		if (!(::PlayState_obj::instance->modchartSprites->exists(tag))) {
HXLINE(1752)			return;
            		}
HXLINE(1755)		 ::ModchartSprite pee = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(1756)		pee->kill();
HXLINE(1757)		if (pee->wasAdded) {
HXLINE(1758)			::PlayState_obj::instance->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(1760)		pee->destroy();
HXLINE(1761)		::PlayState_obj::instance->modchartSprites->remove(tag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,resetSpriteTag,(void))

void FunkinLua_obj::cancelTween(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1765_cancelTween)
HXDLIN(1765)		if (::PlayState_obj::instance->modchartTweens->exists(tag)) {
HXLINE(1766)			( ( ::flixel::tweens::FlxTween)(::PlayState_obj::instance->modchartTweens->get(tag)) )->cancel();
HXLINE(1767)			( ( ::flixel::tweens::FlxTween)(::PlayState_obj::instance->modchartTweens->get(tag)) )->destroy();
HXLINE(1768)			::PlayState_obj::instance->modchartTweens->remove(tag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cancelTween,(void))

 ::Dynamic FunkinLua_obj::tweenShit(::String tag,::String vars){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1772_tweenShit)
HXLINE(1773)		this->cancelTween(tag);
HXLINE(1774)		::Array< ::String > variables = ::StringTools_obj::replace(vars,HX_(" ",20,00,00,00),HX_("",00,00,00,00)).split(HX_(".",2e,00,00,00));
HXLINE(1775)		 ::flixel::FlxState sexyProp;
HXDLIN(1775)		if (::PlayState_obj::instance->isDead) {
HXLINE(1775)			sexyProp = ::GameOverSubstate_obj::instance;
            		}
            		else {
HXLINE(1775)			sexyProp = ::PlayState_obj::instance;
            		}
HXDLIN(1775)		 ::Dynamic sexyProp1 = ::Reflect_obj::getProperty(sexyProp,variables->__get(0));
HXLINE(1776)		if (::PlayState_obj::instance->modchartSprites->exists(variables->__get(0))) {
HXLINE(1777)			sexyProp1 = ::PlayState_obj::instance->modchartSprites->get(variables->__get(0));
            		}
HXLINE(1779)		if (::PlayState_obj::instance->modchartTexts->exists(variables->__get(0))) {
HXLINE(1780)			sexyProp1 = ::PlayState_obj::instance->modchartTexts->get(variables->__get(0));
            		}
HXLINE(1783)		{
HXLINE(1783)			int _g = 1;
HXDLIN(1783)			int _g1 = variables->length;
HXDLIN(1783)			while((_g < _g1)){
HXLINE(1783)				_g = (_g + 1);
HXDLIN(1783)				int i = (_g - 1);
HXLINE(1784)				sexyProp1 = ::Reflect_obj::getProperty(sexyProp1,variables->__get(i));
            			}
            		}
HXLINE(1786)		return sexyProp1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,tweenShit,return )

void FunkinLua_obj::cancelTimer(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1790_cancelTimer)
HXDLIN(1790)		if (::PlayState_obj::instance->modchartTimers->exists(tag)) {
HXLINE(1791)			 ::flixel::util::FlxTimer theTimer = ( ( ::flixel::util::FlxTimer)(::PlayState_obj::instance->modchartTimers->get(tag)) );
HXLINE(1792)			theTimer->cancel();
HXLINE(1793)			theTimer->destroy();
HXLINE(1794)			::PlayState_obj::instance->modchartTimers->remove(tag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cancelTimer,(void))

 ::Dynamic FunkinLua_obj::getFlxEaseByString(::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1799_getFlxEaseByString)
HXLINE(1800)		::String _hx_switch_0 = ::StringTools_obj::trim(ease.toLowerCase());
            		if (  (_hx_switch_0==HX_("backin",cc,4d,99,4a)) ){
HXLINE(1801)			return ::flixel::tweens::FlxEase_obj::backIn_dyn();
HXDLIN(1801)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("backinout",42,fa,a0,07)) ){
HXLINE(1802)			return ::flixel::tweens::FlxEase_obj::backInOut_dyn();
HXDLIN(1802)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("backout",c7,58,8f,fb)) ){
HXLINE(1803)			return ::flixel::tweens::FlxEase_obj::backOut_dyn();
HXDLIN(1803)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("bouncein",6d,53,b0,4c)) ){
HXLINE(1804)			return ::flixel::tweens::FlxEase_obj::bounceIn_dyn();
HXDLIN(1804)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("bounceinout",41,6f,66,e6)) ){
HXLINE(1805)			return ::flixel::tweens::FlxEase_obj::bounceInOut_dyn();
HXDLIN(1805)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("bounceout",06,40,9d,cd)) ){
HXLINE(1806)			return ::flixel::tweens::FlxEase_obj::bounceOut_dyn();
HXDLIN(1806)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("circin",7c,6f,0d,56)) ){
HXLINE(1807)			return ::flixel::tweens::FlxEase_obj::circIn_dyn();
HXDLIN(1807)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("circinout",92,06,0d,e1)) ){
HXLINE(1808)			return ::flixel::tweens::FlxEase_obj::circInOut_dyn();
HXDLIN(1808)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("circout",17,b1,b8,f5)) ){
HXLINE(1809)			return ::flixel::tweens::FlxEase_obj::circOut_dyn();
HXDLIN(1809)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("cubein",1a,80,4a,34)) ){
HXLINE(1810)			return ::flixel::tweens::FlxEase_obj::cubeIn_dyn();
HXDLIN(1810)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("cubeinout",b4,ac,c9,c2)) ){
HXLINE(1811)			return ::flixel::tweens::FlxEase_obj::cubeInOut_dyn();
HXDLIN(1811)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("cubeout",b9,2a,ea,8c)) ){
HXLINE(1812)			return ::flixel::tweens::FlxEase_obj::cubeOut_dyn();
HXDLIN(1812)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("elasticin",fa,3c,61,27)) ){
HXLINE(1813)			return ::flixel::tweens::FlxEase_obj::elasticIn_dyn();
HXDLIN(1813)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("elasticinout",d4,3b,a0,39)) ){
HXLINE(1814)			return ::flixel::tweens::FlxEase_obj::elasticInOut_dyn();
HXDLIN(1814)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("elasticout",d9,b1,b8,4d)) ){
HXLINE(1815)			return ::flixel::tweens::FlxEase_obj::elasticOut_dyn();
HXDLIN(1815)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("expoin",97,89,7d,c4)) ){
HXLINE(1816)			return ::flixel::tweens::FlxEase_obj::expoIn_dyn();
HXDLIN(1816)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("expoinout",57,ef,01,5a)) ){
HXLINE(1817)			return ::flixel::tweens::FlxEase_obj::expoInOut_dyn();
HXDLIN(1817)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("expoout",9c,6e,5f,29)) ){
HXLINE(1818)			return ::flixel::tweens::FlxEase_obj::expoOut_dyn();
HXDLIN(1818)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quadin",6c,94,9f,cc)) ){
HXLINE(1819)			return ::flixel::tweens::FlxEase_obj::quadIn_dyn();
HXDLIN(1819)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quadinout",a2,97,0c,bc)) ){
HXLINE(1820)			return ::flixel::tweens::FlxEase_obj::quadInOut_dyn();
HXDLIN(1820)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quadout",27,de,06,3f)) ){
HXLINE(1821)			return ::flixel::tweens::FlxEase_obj::quadOut_dyn();
HXDLIN(1821)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quartin",a4,9b,4b,48)) ){
HXLINE(1822)			return ::flixel::tweens::FlxEase_obj::quartIn_dyn();
HXDLIN(1822)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quartinout",6a,e3,62,99)) ){
HXLINE(1823)			return ::flixel::tweens::FlxEase_obj::quartInOut_dyn();
HXDLIN(1823)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quartout",ef,27,e1,f9)) ){
HXLINE(1824)			return ::flixel::tweens::FlxEase_obj::quartOut_dyn();
HXDLIN(1824)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quintin",30,65,db,e0)) ){
HXLINE(1825)			return ::flixel::tweens::FlxEase_obj::quintIn_dyn();
HXDLIN(1825)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quintinout",5e,99,a0,bc)) ){
HXLINE(1826)			return ::flixel::tweens::FlxEase_obj::quintInOut_dyn();
HXDLIN(1826)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("quintout",e3,b8,21,df)) ){
HXLINE(1827)			return ::flixel::tweens::FlxEase_obj::quintOut_dyn();
HXDLIN(1827)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("sinein",72,df,1f,b9)) ){
HXLINE(1828)			return ::flixel::tweens::FlxEase_obj::sineIn_dyn();
HXDLIN(1828)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("sineinout",5c,74,84,36)) ){
HXLINE(1829)			return ::flixel::tweens::FlxEase_obj::sineInOut_dyn();
HXDLIN(1829)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("sineout",61,38,c8,42)) ){
HXLINE(1830)			return ::flixel::tweens::FlxEase_obj::sineOut_dyn();
HXDLIN(1830)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepin",8c,7c,27,7b)) ){
HXLINE(1834)			return ::flixel::tweens::FlxEase_obj::smootherStepIn_dyn();
HXDLIN(1834)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepinout",82,83,8c,0a)) ){
HXLINE(1835)			return ::flixel::tweens::FlxEase_obj::smootherStepInOut_dyn();
HXDLIN(1835)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepout",07,12,6a,47)) ){
HXLINE(1836)			return ::flixel::tweens::FlxEase_obj::smootherStepOut_dyn();
HXDLIN(1836)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepin",df,0c,da,16)) ){
HXLINE(1831)			return ::flixel::tweens::FlxEase_obj::smoothStepIn_dyn();
HXDLIN(1831)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepinout",0f,a9,b0,af)) ){
HXLINE(1832)			return ::flixel::tweens::FlxEase_obj::smoothStepInOut_dyn();
HXDLIN(1832)			goto _hx_goto_199;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepout",54,ca,f5,e7)) ){
HXLINE(1833)			return ::flixel::tweens::FlxEase_obj::smoothStepInOut_dyn();
HXDLIN(1833)			goto _hx_goto_199;
            		}
            		_hx_goto_199:;
HXLINE(1838)		return ::flixel::tweens::FlxEase_obj::linear_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getFlxEaseByString,return )

 ::Dynamic FunkinLua_obj::blendModeFromString(::String blend){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1841_blendModeFromString)
HXLINE(1842)		::String _hx_switch_0 = ::StringTools_obj::trim(blend.toLowerCase());
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE(1843)			return 0;
HXDLIN(1843)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("alpha",5e,a7,96,21)) ){
HXLINE(1844)			return 1;
HXDLIN(1844)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("darken",5f,36,3a,21)) ){
HXLINE(1845)			return 2;
HXDLIN(1845)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("difference",fd,9b,91,46)) ){
HXLINE(1846)			return 3;
HXDLIN(1846)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("erase",e6,e8,1c,73)) ){
HXLINE(1847)			return 4;
HXDLIN(1847)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("hardlight",0b,6e,6b,53)) ){
HXLINE(1848)			return 5;
HXDLIN(1848)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("invert",16,e7,d8,9f)) ){
HXLINE(1849)			return 6;
HXDLIN(1849)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("layer",d1,81,c0,6f)) ){
HXLINE(1850)			return 7;
HXDLIN(1850)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("lighten",bf,4a,e3,19)) ){
HXLINE(1851)			return 8;
HXDLIN(1851)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("multiply",24,e2,8c,9a)) ){
HXLINE(1852)			return 9;
HXDLIN(1852)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("overlay",90,43,10,a9)) ){
HXLINE(1853)			return 11;
HXDLIN(1853)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("screen",6c,3b,5d,47)) ){
HXLINE(1854)			return 12;
HXDLIN(1854)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("shader",25,bf,20,1d)) ){
HXLINE(1855)			return 13;
HXDLIN(1855)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE(1856)			return 14;
HXDLIN(1856)			goto _hx_goto_201;
            		}
            		_hx_goto_201:;
HXLINE(1858)		return 10;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,blendModeFromString,return )

 ::flixel::FlxCamera FunkinLua_obj::cameraFromString(::String cam){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1861_cameraFromString)
HXLINE(1862)		::String _hx_switch_0 = cam.toLowerCase();
            		if (  (_hx_switch_0==HX_("camhud",08,90,8e,b7)) ||  (_hx_switch_0==HX_("hud",b7,50,4f,00)) ){
HXLINE(1863)			return ::PlayState_obj::instance->camHUD;
HXDLIN(1863)			goto _hx_goto_203;
            		}
            		if (  (_hx_switch_0==HX_("camother",61,dc,80,ab)) ||  (_hx_switch_0==HX_("other",d0,66,76,36)) ){
HXLINE(1864)			return ::PlayState_obj::instance->camOther;
HXDLIN(1864)			goto _hx_goto_203;
            		}
            		_hx_goto_203:;
HXLINE(1866)		return ::PlayState_obj::instance->camGame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cameraFromString,return )

 ::ChromaticAberrationEffect FunkinLua_obj::shaderFromString(::String cam){
            	HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1874_shaderFromString)
HXDLIN(1874)		return  ::ChromaticAberrationEffect_obj::__alloc( HX_CTX ,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,shaderFromString,return )

void FunkinLua_obj::luaTrace(::String text,::hx::Null< bool >  __o_ignoreCheck,::hx::Null< bool >  __o_deprecated){
            		bool ignoreCheck = __o_ignoreCheck.Default(false);
            		bool deprecated = __o_deprecated.Default(false);
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1879_luaTrace)
HXDLIN(1879)		bool _hx_tmp;
HXDLIN(1879)		if (!(ignoreCheck)) {
HXDLIN(1879)			_hx_tmp = this->getBool(HX_("luaDebugMode",7e,06,20,4c));
            		}
            		else {
HXDLIN(1879)			_hx_tmp = true;
            		}
HXDLIN(1879)		if (_hx_tmp) {
HXLINE(1880)			bool _hx_tmp;
HXDLIN(1880)			if (deprecated) {
HXLINE(1880)				_hx_tmp = !(this->getBool(HX_("luaDeprecatedWarnings",02,69,36,70)));
            			}
            			else {
HXLINE(1880)				_hx_tmp = false;
            			}
HXDLIN(1880)			if (_hx_tmp) {
HXLINE(1881)				return;
            			}
HXLINE(1883)			::PlayState_obj::instance->addTextToDebug(text);
HXLINE(1884)			::haxe::Log_obj::trace(text,::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),1884,HX_("FunkinLua",e7,f3,7b,36),HX_("luaTrace",ad,69,82,94)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FunkinLua_obj,luaTrace,(void))

 ::Dynamic FunkinLua_obj::call(::String event,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1889_call)
HXLINE(1891)		if (::hx::IsNull( this->lua )) {
HXLINE(1892)			return ::FunkinLua_obj::Function_Continue;
            		}
HXLINE(1895)		lua_getglobal(this->lua,event);
HXLINE(1897)		{
HXLINE(1897)			int _g = 0;
HXDLIN(1897)			while((_g < args->get_length())){
HXLINE(1897)				 ::Dynamic arg = args->__get(_g);
HXDLIN(1897)				_g = (_g + 1);
HXLINE(1898)				::llua::Convert_obj::toLua(this->lua,arg);
            			}
            		}
HXLINE(1901)		 ::Dynamic result = lua_pcall(this->lua,args->get_length(),1,0);
HXLINE(1902)		bool _hx_tmp;
HXDLIN(1902)		if (::hx::IsNotNull( result )) {
HXLINE(1902)			_hx_tmp = this->resultIsAllowed(this->lua,result);
            		}
            		else {
HXLINE(1902)			_hx_tmp = false;
            		}
HXDLIN(1902)		if (_hx_tmp) {
HXLINE(1906)			if ((lua_type(this->lua,-1) == 4)) {
HXLINE(1907)				::String error = linc::lua::tostring(this->lua,-1);
HXLINE(1908)				lua_pop(this->lua,1);
HXLINE(1909)				if ((error == HX_("attempt to call a nil value",93,04,85,54))) {
HXLINE(1910)					return ::FunkinLua_obj::Function_Continue;
            				}
            			}
HXLINE(1914)			 cpp::Reference<lua_State> l = this->lua;
HXDLIN(1914)			int v = ( (int)(result) );
HXDLIN(1914)			 ::Dynamic ret = null();
HXDLIN(1914)			switch((int)(lua_type(l,v))){
            				case (int)0: {
HXLINE(1914)					ret = null();
            				}
            				break;
            				case (int)1: {
HXLINE(1914)					ret = (lua_toboolean(l,v) != 0);
            				}
            				break;
            				case (int)3: {
HXLINE(1914)					ret = lua_tonumber(l,v);
            				}
            				break;
            				case (int)4: {
HXLINE(1914)					ret = linc::lua::tostring(l,v);
            				}
            				break;
            				case (int)5: {
HXLINE(1914)					ret = ::llua::Convert_obj::toHaxeObj(l,v);
            				}
            				break;
            				default:{
HXLINE(1914)					ret = null();
HXDLIN(1914)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(1914)					::String _hx_tmp1 = (HX_("return value not supported\n",48,41,fb,c8) + ::Std_obj::string(::Type_obj::_hx_typeof(v)));
HXDLIN(1914)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),103,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            				}
            			}
HXDLIN(1914)			 ::Dynamic conv = ret;
HXLINE(1915)			return conv;
            		}
HXLINE(1918)		return ::FunkinLua_obj::Function_Continue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,call,return )

bool FunkinLua_obj::resultIsAllowed( cpp::Reference<lua_State> leLua, ::Dynamic leResult){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1922_resultIsAllowed)
HXLINE(1923)		switch((int)(lua_type(leLua,( (int)(leResult) )))){
            			case (int)0: case (int)1: case (int)3: case (int)4: case (int)5: {
HXLINE(1925)				return true;
            			}
            			break;
            		}
HXLINE(1927)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,resultIsAllowed,return )

void FunkinLua_obj::set(::String variable, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1931_set)
HXLINE(1933)		if (::hx::IsNull( this->lua )) {
HXLINE(1934)			return;
            		}
HXLINE(1937)		::llua::Convert_obj::toLua(this->lua,data);
HXLINE(1938)		lua_setglobal(this->lua,variable);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,set,(void))

bool FunkinLua_obj::getBool(::String variable){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1943_getBool)
HXLINE(1944)		::String result = null();
HXLINE(1945)		lua_getglobal(this->lua,variable);
HXLINE(1946)		 cpp::Reference<lua_State> l = this->lua;
HXDLIN(1946)		 ::Dynamic ret = null();
HXDLIN(1946)		switch((int)(lua_type(l,-1))){
            			case (int)0: {
HXLINE(1946)				ret = null();
            			}
            			break;
            			case (int)1: {
HXLINE(1946)				ret = (lua_toboolean(l,-1) != 0);
            			}
            			break;
            			case (int)3: {
HXLINE(1946)				ret = lua_tonumber(l,-1);
            			}
            			break;
            			case (int)4: {
HXLINE(1946)				ret = linc::lua::tostring(l,-1);
            			}
            			break;
            			case (int)5: {
HXLINE(1946)				ret = ::llua::Convert_obj::toHaxeObj(l,-1);
            			}
            			break;
            			default:{
HXLINE(1946)				ret = null();
HXDLIN(1946)				 ::Dynamic this1 = ::haxe::Log_obj::trace;
HXDLIN(1946)				::String this2 = (HX_("return value not supported\n",48,41,fb,c8) + ::Std_obj::string(::Type_obj::_hx_typeof(-1)));
HXDLIN(1946)				this1(this2,::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),103,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            			}
            		}
HXDLIN(1946)		result = ( (::String)(ret) );
HXLINE(1947)		lua_pop(this->lua,1);
HXLINE(1949)		if (::hx::IsNull( result )) {
HXLINE(1950)			return false;
            		}
HXLINE(1955)		return (result == HX_("true",4e,a7,03,4d));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getBool,return )

void FunkinLua_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1959_stop)
HXLINE(1961)		if (::hx::IsNull( this->lua )) {
HXLINE(1962)			return;
            		}
HXLINE(1965)		if (::hx::IsNotNull( this->accessedProps )) {
HXLINE(1966)			this->accessedProps->clear();
            		}
HXLINE(1969)		lua_close(this->lua);
HXLINE(1970)		this->lua = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunkinLua_obj,stop,(void))

 ::flixel::FlxState FunkinLua_obj::getInstance(){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_1976_getInstance)
HXDLIN(1976)		if (::PlayState_obj::instance->isDead) {
HXDLIN(1976)			return ::GameOverSubstate_obj::instance;
            		}
            		else {
HXDLIN(1976)			return ::PlayState_obj::instance;
            		}
HXDLIN(1976)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunkinLua_obj,getInstance,return )

int FunkinLua_obj::Function_Stop;

int FunkinLua_obj::Function_Continue;


::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__new(::String script) {
	::hx::ObjectPtr< FunkinLua_obj > __this = new FunkinLua_obj();
	__this->__construct(script);
	return __this;
}

::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__alloc(::hx::Ctx *_hx_ctx,::String script) {
	FunkinLua_obj *__this = (FunkinLua_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunkinLua_obj), true, "FunkinLua"));
	*(void **)__this = FunkinLua_obj::_hx_vtable;
	__this->__construct(script);
	return __this;
}

FunkinLua_obj::FunkinLua_obj()
{
}

void FunkinLua_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunkinLua);
	HX_MARK_MEMBER_NAME(lua,"lua");
	HX_MARK_MEMBER_NAME(scriptName,"scriptName");
	HX_MARK_MEMBER_NAME(gonnaClose,"gonnaClose");
	HX_MARK_MEMBER_NAME(accessedProps,"accessedProps");
	HX_MARK_END_CLASS();
}

void FunkinLua_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lua,"lua");
	HX_VISIT_MEMBER_NAME(scriptName,"scriptName");
	HX_VISIT_MEMBER_NAME(gonnaClose,"gonnaClose");
	HX_VISIT_MEMBER_NAME(accessedProps,"accessedProps");
}

::hx::Val FunkinLua_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { return ::hx::Val( lua ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getBool") ) { return ::hx::Val( getBool_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"luaTrace") ) { return ::hx::Val( luaTrace_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tweenShit") ) { return ::hx::Val( tweenShit_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { return ::hx::Val( scriptName ); }
		if (HX_FIELD_EQ(inName,"gonnaClose") ) { return ::hx::Val( gonnaClose ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cancelTween") ) { return ::hx::Val( cancelTween_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelTimer") ) { return ::hx::Val( cancelTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInstance") ) { return ::hx::Val( getInstance_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetTextTag") ) { return ::hx::Val( resetTextTag_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"accessedProps") ) { return ::hx::Val( accessedProps ); }
		if (HX_FIELD_EQ(inName,"getTextObject") ) { return ::hx::Val( getTextObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroupStuff") ) { return ::hx::Val( getGroupStuff_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGroupStuff") ) { return ::hx::Val( setGroupStuff_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resetSpriteTag") ) { return ::hx::Val( resetSpriteTag_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resultIsAllowed") ) { return ::hx::Val( resultIsAllowed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cameraFromString") ) { return ::hx::Val( cameraFromString_dyn() ); }
		if (HX_FIELD_EQ(inName,"shaderFromString") ) { return ::hx::Val( shaderFromString_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getFlxEaseByString") ) { return ::hx::Val( getFlxEaseByString_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"blendModeFromString") ) { return ::hx::Val( blendModeFromString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunkinLua_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { outValue = ( Function_Stop ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { outValue = ( Function_Continue ); return true; }
	}
	return false;
}

::hx::Val FunkinLua_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { lua=inValue.Cast<  cpp::Reference<lua_State> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { scriptName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gonnaClose") ) { gonnaClose=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"accessedProps") ) { accessedProps=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FunkinLua_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { Function_Stop=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { Function_Continue=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void FunkinLua_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lua",b8,59,52,00));
	outFields->push(HX_("scriptName",f6,4d,e0,41));
	outFields->push(HX_("gonnaClose",ff,59,b7,ea));
	outFields->push(HX_("accessedProps",6d,6d,dc,c1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunkinLua_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  cpp::Reference<lua_State> */ ,(int)offsetof(FunkinLua_obj,lua),HX_("lua",b8,59,52,00)},
	{::hx::fsString,(int)offsetof(FunkinLua_obj,scriptName),HX_("scriptName",f6,4d,e0,41)},
	{::hx::fsBool,(int)offsetof(FunkinLua_obj,gonnaClose),HX_("gonnaClose",ff,59,b7,ea)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FunkinLua_obj,accessedProps),HX_("accessedProps",6d,6d,dc,c1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FunkinLua_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FunkinLua_obj::Function_Stop,HX_("Function_Stop",c9,a5,e8,d3)},
	{::hx::fsInt,(void *) &FunkinLua_obj::Function_Continue,HX_("Function_Continue",ae,85,11,8b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FunkinLua_obj_sMemberFields[] = {
	HX_("lua",b8,59,52,00),
	HX_("scriptName",f6,4d,e0,41),
	HX_("gonnaClose",ff,59,b7,ea),
	HX_("accessedProps",6d,6d,dc,c1),
	HX_("getTextObject",82,5b,a2,a8),
	HX_("getGroupStuff",6b,8b,58,57),
	HX_("setGroupStuff",77,6d,5e,9c),
	HX_("resetTextTag",9e,f5,a5,10),
	HX_("resetSpriteTag",86,2b,7a,b0),
	HX_("cancelTween",91,12,99,b7),
	HX_("tweenShit",cb,b7,19,83),
	HX_("cancelTimer",eb,27,5e,ae),
	HX_("getFlxEaseByString",b2,e7,5d,b6),
	HX_("blendModeFromString",4f,47,9d,c2),
	HX_("cameraFromString",e0,18,60,4a),
	HX_("shaderFromString",60,31,70,a2),
	HX_("luaTrace",ad,69,82,94),
	HX_("call",9e,18,ba,41),
	HX_("resultIsAllowed",c1,61,f6,16),
	HX_("set",a2,9b,57,00),
	HX_("getBool",e0,33,9e,13),
	HX_("stop",02,f0,5b,4c),
	HX_("getInstance",4b,e2,d4,7f),
	::String(null()) };

static void FunkinLua_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunkinLua_obj::Function_Stop,"Function_Stop");
	HX_MARK_MEMBER_NAME(FunkinLua_obj::Function_Continue,"Function_Continue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunkinLua_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::Function_Stop,"Function_Stop");
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::Function_Continue,"Function_Continue");
};

#endif

::hx::Class FunkinLua_obj::__mClass;

static ::String FunkinLua_obj_sStaticFields[] = {
	HX_("Function_Stop",c9,a5,e8,d3),
	HX_("Function_Continue",ae,85,11,8b),
	::String(null())
};

void FunkinLua_obj::__register()
{
	FunkinLua_obj _hx_dummy;
	FunkinLua_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FunkinLua",e7,f3,7b,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunkinLua_obj::__GetStatic;
	__mClass->mSetStaticField = &FunkinLua_obj::__SetStatic;
	__mClass->mMarkFunc = FunkinLua_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunkinLua_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunkinLua_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunkinLua_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunkinLua_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FunkinLua_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_46_boot)
HXDLIN(  46)		Function_Stop = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_47_boot)
HXDLIN(  47)		Function_Continue = 0;
            	}
}

